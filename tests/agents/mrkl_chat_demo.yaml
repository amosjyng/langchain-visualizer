interactions:
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - 0.0.0.0:8935
      user-agent:
      - python-httpx/0.24.1
    method: GET
    uri: http://0.0.0.0:8935/ping
  response:
    content: ought-ice says pong
    headers:
      cache-control:
      - no-transform
      content-length:
      - '19'
      content-type:
      - text/plain; charset=utf-8
      date:
      - Tue, 30 May 2023 05:24:15 GMT
      server:
      - uvicorn
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\n"}], "model": "gpt-3.5-turbo", "max_tokens":
      null, "stream": false, "n": 1, "temperature": 0.0, "stop": ["Observation:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1770'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SRzY8SQRDF7/4VlbrsZSCwfIhzMYtGs4lZP9iEg2OWpqeGbrenauyuCYuE/90w
        sOjFePD6qt+v3qveoy8xR+uM2roJvZcf6tlsOHr/5e7jbvJ4U4WGB6/46dPdYln9xAxl/Z2snh19
        K3UTSL0wZmgjGaUS8+F0Nhlfj68n0wxrKSlgjptGe6P+pKdtXEtvMBoMMcM2mQ1hvscmSt3og8oj
        ccJ8NJ1k+Jt90YfDWYYqasJFGs9GhwytE28pYf51jzWlZ2yUQJijScknNazHkMJKfCzwuaV0pOew
        dEbBJ1BHULUhAJuaQKpOMFF9Utg6gUiWWMMOIgUyiUowDCas2xqsCYFKuLp3BAuVWMOcKonUId6Y
        UF+B4RLMSdmB527yTmRuIpRGzdokeg23FSTJYHtM1JHTOYePqXP/xVjwvZN24zSHW0hO2lBCm07r
        F2SidaAiAVSg8lyemnHaUjxKXXEfk0Jjoj43/3E+UJdcHfGFeN7+dv4vaCIrXHbUfsE3trt3wavV
        quB9wQAFmk4sMIcCT0kLzP4cPXhuWj09WP7vLxRY8OEcAA8ZVp59cg+RTBLGHJNKgxl6LukJ88Hh
        2+HFLwAAAP//AwCM4a98IgMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cf48cc05a653e6a-ADL
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 05:24:26 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-dpc5ftw8bvmpxblb49hwviq5
      openai-processing-ms:
      - '10105'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89599'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 267ms
      x-request-id:
      - 8ed8fc24e678b7f5ff89d25095c2779f
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - python-requests/2.31.0
    method: GET
    uri: https://serpapi.com/search?engine=google&gl=us&google_domain=google.com&hl=en&output=json&q=Who+recently+released+an+album+called+%27The+Storm+Before+the+Calm%27&source=python
  response:
    body:
      string: !!binary |
        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
    headers:
      Age:
      - '149'
      CF-Cache-Status:
      - HIT
      CF-Ray:
      - 7cf48d07ea2b3e76-ADL
      Cache-Control:
      - max-age=3600, public
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 30 May 2023 05:24:27 GMT
      ETag:
      - W/"9cc114ab6cd6779d6533803ebd9fafcd"
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      alt-svc:
      - h3=":443"; ma=86400
      referrer-policy:
      - strict-origin-when-cross-origin
      serpapi-search-id:
      - 647587ef37b24a391a8e2ebc
      x-content-type-options:
      - nosniff
      x-download-options:
      - noopen
      x-frame-options:
      - SAMEORIGIN
      x-permitted-cross-domain-policies:
      - none
      x-request-id:
      - 54df337e-6af1-4d35-9f37-53133809757b
      x-robots-tag:
      - noindex, nofollow
      x-runtime:
      - '7.300053'
      x-xss-protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\nThis was your previous work (but I haven''t seen
      any of it! I only see what you return as final answer):\nQuestion: What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\nThought: I should use the Search tool to find the
      answer to the first part of the question and then use the FooBar DB tool to
      find the answer to the second part.\nAction:\n```\n{\n  \"action\": \"Search\",\n  \"action_input\":
      \"Who recently released an album called ''The Storm Before the Calm''\"\n}\n```\n\nObservation:
      Alanis Morissette\nThought:"}], "model": "gpt-3.5-turbo", "max_tokens": null,
      "stream": false, "n": 1, "temperature": 0.0, "stop": ["Observation:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2430'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2SPzW4aUQyF930Ky5tuLghICMndVERVJao2tFLVVOqtwMyYcJsZezT2lKSId68g
        v1J31vHnc453mEuMWGzIi7qpepNP9fnHyubDUeVft/b975fZfXf1427+bTufYkBd/ebCHy/6hdZN
        xZ5VMGDRMjmXGIdn5+PT0enobBKw1pIrjHjTeO+kP+551660NzgZDDFgZ3TDGHfYtFo3vnC9ZTGM
        4+FFwBfvZ30yDOjqVL2QF4N9wGKjuWDD+HOHNduTa6sVY0Qyy+Ykfuio4iyH/le6Bd+Qwwxu5Tgz
        UOvZ/K2BUM0BZlCQQGd8XH5QvaQW3l+Cq1bgCussJWjnkNcH4h6oZchypEtyWpExkJSwPeRQtepq
        Az2yubUnOns/ybQ4PBqTLJfLJLskAAnpKCaMkPA5PWF4vV1kaTp/YK5fxZTKBtOKJBt81jabsTvD
        hv78V/FdwiT7x+gkuA+4zpJts2iZTAUjmmuDAbOUfIdxsP+1f/MPAAD//wMAhcyaGDkCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cf48d0849d73e6a-ADL
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 05:24:34 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-dpc5ftw8bvmpxblb49hwviq5
      openai-processing-ms:
      - '6561'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89439'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 374ms
      x-request-id:
      - 66a59fa0cbdb362ecc0a7371c0a06b7b
    status:
      code: 200
      message: OK
- request:
    body: '{"prompt": ["You are a SQLite expert. Given an input question, first create
      a syntactically correct SQLite query to run, then look at the results of the
      query and return the answer to the input question.\nUnless the user specifies
      in the question a specific number of examples to obtain, query for at most 5
      results using the LIMIT clause as per SQLite. You can order the results to return
      the most informative data in the database.\nNever query for all columns from
      a table. You must query only the columns that are needed to answer the question.
      Wrap each column name in double quotes (\") to denote them as delimited identifiers.\nPay
      attention to use only the column names you can see in the tables below. Be careful
      to not query for columns that do not exist. Also, pay attention to which column
      is in which table.\nPay attention to use date(''now'') function to get the current
      date, if the question involves \"today\".\n\nUse the following format:\n\nQuestion:
      Question here\nSQLQuery: SQL Query to run\nSQLResult: Result of the SQLQuery\nAnswer:
      Final answer here\n\nOnly use the following tables:\n\nCREATE TABLE \"Artist\"
      (\n\t\"ArtistId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120), \n\tPRIMARY
      KEY (\"ArtistId\")\n)\n\n/*\n3 rows from Artist table:\nArtistId\tName\n1\tAC/DC\n2\tAccept\n3\tAerosmith\n*/\n\n\nCREATE
      TABLE \"Employee\" (\n\t\"EmployeeId\" INTEGER NOT NULL, \n\t\"LastName\" NVARCHAR(20)
      NOT NULL, \n\t\"FirstName\" NVARCHAR(20) NOT NULL, \n\t\"Title\" NVARCHAR(30),
      \n\t\"ReportsTo\" INTEGER, \n\t\"BirthDate\" DATETIME, \n\t\"HireDate\" DATETIME,
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60), \n\tPRIMARY
      KEY (\"EmployeeId\"), \n\tFOREIGN KEY(\"ReportsTo\") REFERENCES \"Employee\"
      (\"EmployeeId\")\n)\n\n/*\n3 rows from Employee table:\nEmployeeId\tLastName\tFirstName\tTitle\tReportsTo\tBirthDate\tHireDate\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\n\n*/\n\n\nCREATE
      TABLE \"Genre\" (\n\t\"GenreId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"GenreId\")\n)\n\n/*\n3 rows from Genre table:\nGenreId\tName\n1\tRock\n2\tJazz\n3\tMetal\n*/\n\n\nCREATE
      TABLE \"MediaType\" (\n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"MediaTypeId\")\n)\n\n/*\n3 rows from MediaType table:\nMediaTypeId\tName\n1\tMPEG
      audio file\n2\tProtected AAC audio file\n3\tProtected MPEG-4 video file\n*/\n\n\nCREATE
      TABLE \"Playlist\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"PlaylistId\")\n)\n\n/*\n3 rows from Playlist table:\nPlaylistId\tName\n\n*/\n\n\nCREATE
      TABLE \"Album\" (\n\t\"AlbumId\" INTEGER NOT NULL, \n\t\"Title\" NVARCHAR(160)
      NOT NULL, \n\t\"ArtistId\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"AlbumId\"),
      \n\tFOREIGN KEY(\"ArtistId\") REFERENCES \"Artist\" (\"ArtistId\")\n)\n\n/*\n3
      rows from Album table:\nAlbumId\tTitle\tArtistId\n1\tFor Those About To Rock
      We Salute You\t1\n2\tBalls to the Wall\t2\n3\tRestless and Wild\t2\n*/\n\n\nCREATE
      TABLE \"Customer\" (\n\t\"CustomerId\" INTEGER NOT NULL, \n\t\"FirstName\" NVARCHAR(40)
      NOT NULL, \n\t\"LastName\" NVARCHAR(20) NOT NULL, \n\t\"Company\" NVARCHAR(80),
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60) NOT NULL,
      \n\t\"SupportRepId\" INTEGER, \n\tPRIMARY KEY (\"CustomerId\"), \n\tFOREIGN
      KEY(\"SupportRepId\") REFERENCES \"Employee\" (\"EmployeeId\")\n)\n\n/*\n3 rows
      from Customer table:\nCustomerId\tFirstName\tLastName\tCompany\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\tSupportRepId\n\n*/\n\n\nCREATE
      TABLE \"Invoice\" (\n\t\"InvoiceId\" INTEGER NOT NULL, \n\t\"CustomerId\" INTEGER
      NOT NULL, \n\t\"InvoiceDate\" DATETIME NOT NULL, \n\t\"BillingAddress\" NVARCHAR(70),
      \n\t\"BillingCity\" NVARCHAR(40), \n\t\"BillingState\" NVARCHAR(40), \n\t\"BillingCountry\"
      NVARCHAR(40), \n\t\"BillingPostalCode\" NVARCHAR(10), \n\t\"Total\" NUMERIC(10,
      2) NOT NULL, \n\tPRIMARY KEY (\"InvoiceId\"), \n\tFOREIGN KEY(\"CustomerId\")
      REFERENCES \"Customer\" (\"CustomerId\")\n)\n\n/*\n3 rows from Invoice table:\nInvoiceId\tCustomerId\tInvoiceDate\tBillingAddress\tBillingCity\tBillingState\tBillingCountry\tBillingPostalCode\tTotal\n\n*/\n\n\nCREATE
      TABLE \"Track\" (\n\t\"TrackId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(200)
      NOT NULL, \n\t\"AlbumId\" INTEGER, \n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"GenreId\"
      INTEGER, \n\t\"Composer\" NVARCHAR(220), \n\t\"Milliseconds\" INTEGER NOT NULL,
      \n\t\"Bytes\" INTEGER, \n\t\"UnitPrice\" NUMERIC(10, 2) NOT NULL, \n\tPRIMARY
      KEY (\"TrackId\"), \n\tFOREIGN KEY(\"MediaTypeId\") REFERENCES \"MediaType\"
      (\"MediaTypeId\"), \n\tFOREIGN KEY(\"GenreId\") REFERENCES \"Genre\" (\"GenreId\"),
      \n\tFOREIGN KEY(\"AlbumId\") REFERENCES \"Album\" (\"AlbumId\")\n)\n\n/*\n3
      rows from Track table:\nTrackId\tName\tAlbumId\tMediaTypeId\tGenreId\tComposer\tMilliseconds\tBytes\tUnitPrice\n1\tFor
      Those About To Rock (We Salute You)\t1\t1\t1\tAngus Young, Malcolm Young, Brian
      Johnson\t343719\t11170334\t0.99\n2\tBalls to the Wall\t2\t2\t1\tNone\t342562\t5510424\t0.99\n3\tFast
      As a Shark\t3\t2\t1\tF. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman\t230619\t3990994\t0.99\n*/\n\n\nCREATE
      TABLE \"InvoiceLine\" (\n\t\"InvoiceLineId\" INTEGER NOT NULL, \n\t\"InvoiceId\"
      INTEGER NOT NULL, \n\t\"TrackId\" INTEGER NOT NULL, \n\t\"UnitPrice\" NUMERIC(10,
      2) NOT NULL, \n\t\"Quantity\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"InvoiceLineId\"),
      \n\tFOREIGN KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN
      KEY(\"InvoiceId\") REFERENCES \"Invoice\" (\"InvoiceId\")\n)\n\n/*\n3 rows from
      InvoiceLine table:\nInvoiceLineId\tInvoiceId\tTrackId\tUnitPrice\tQuantity\n\n*/\n\n\nCREATE
      TABLE \"PlaylistTrack\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"TrackId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"PlaylistId\", \"TrackId\"), \n\tFOREIGN
      KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN KEY(\"PlaylistId\")
      REFERENCES \"Playlist\" (\"PlaylistId\")\n)\n\n/*\n3 rows from PlaylistTrack
      table:\nPlaylistId\tTrackId\n\n*/\n\nQuestion: What albums does Alanis Morissette
      have in the database?\nSQLQuery:"], "model": "text-davinci-003", "temperature":
      0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty":
      0, "n": 1, "logit_bias": {}, "stop": ["\nSQLResult:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6608'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.7
    method: POST
    uri: https://api.openai.com/v1/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1TQT0/CMBjH8buvovlduBQz5safGg+EzDj+jDgxHpwho6tQ7dplLbhIeO8GoqLX
        3/eT5/DsIQsw8LJS7d607N/3HkfDycc4HESTlKudDT95M/LGV6AwqzfBHRicaNySm7JSwkmjQcFr
        kTtRgHW6/TDwA78XUJSmEOqbt4t8JzWXbc87nuIbI7mwYM/7UwYDeYim0WhBMiykUyIDuU3nM5Jh
        qFbbMgOJkyRKyXgeJ8exdtK6DGSenMnlzx4XGcjNH/a/PN1FaUQyJHkpTrA1VLmWlsxMLa0VzokW
        mcazeEHCa1BIXYgGzKNQZl3VZmXB9FYpileppd0sa5Fbo8FgnalweKHY2nwtwPaoalNWbunMu9AW
        zO90uxTn3/2GYEDhjMvVmfqd8HC4+AIAAP//AwCeahD/ogEAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cf48d32ec2c3e6a-ADL
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 05:24:42 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-davinci-003
      openai-organization:
      - user-dpc5ftw8bvmpxblb49hwviq5
      openai-processing-ms:
      - '8099'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '250000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '249744'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 61ms
      x-request-id:
      - 182d6eb57578e31d4eb78daa4cbe3b14
    status:
      code: 200
      message: OK
- request:
    body: '{"prompt": ["You are a SQLite expert. Given an input question, first create
      a syntactically correct SQLite query to run, then look at the results of the
      query and return the answer to the input question.\nUnless the user specifies
      in the question a specific number of examples to obtain, query for at most 5
      results using the LIMIT clause as per SQLite. You can order the results to return
      the most informative data in the database.\nNever query for all columns from
      a table. You must query only the columns that are needed to answer the question.
      Wrap each column name in double quotes (\") to denote them as delimited identifiers.\nPay
      attention to use only the column names you can see in the tables below. Be careful
      to not query for columns that do not exist. Also, pay attention to which column
      is in which table.\nPay attention to use date(''now'') function to get the current
      date, if the question involves \"today\".\n\nUse the following format:\n\nQuestion:
      Question here\nSQLQuery: SQL Query to run\nSQLResult: Result of the SQLQuery\nAnswer:
      Final answer here\n\nOnly use the following tables:\n\nCREATE TABLE \"Artist\"
      (\n\t\"ArtistId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120), \n\tPRIMARY
      KEY (\"ArtistId\")\n)\n\n/*\n3 rows from Artist table:\nArtistId\tName\n1\tAC/DC\n2\tAccept\n3\tAerosmith\n*/\n\n\nCREATE
      TABLE \"Employee\" (\n\t\"EmployeeId\" INTEGER NOT NULL, \n\t\"LastName\" NVARCHAR(20)
      NOT NULL, \n\t\"FirstName\" NVARCHAR(20) NOT NULL, \n\t\"Title\" NVARCHAR(30),
      \n\t\"ReportsTo\" INTEGER, \n\t\"BirthDate\" DATETIME, \n\t\"HireDate\" DATETIME,
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60), \n\tPRIMARY
      KEY (\"EmployeeId\"), \n\tFOREIGN KEY(\"ReportsTo\") REFERENCES \"Employee\"
      (\"EmployeeId\")\n)\n\n/*\n3 rows from Employee table:\nEmployeeId\tLastName\tFirstName\tTitle\tReportsTo\tBirthDate\tHireDate\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\n\n*/\n\n\nCREATE
      TABLE \"Genre\" (\n\t\"GenreId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"GenreId\")\n)\n\n/*\n3 rows from Genre table:\nGenreId\tName\n1\tRock\n2\tJazz\n3\tMetal\n*/\n\n\nCREATE
      TABLE \"MediaType\" (\n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"MediaTypeId\")\n)\n\n/*\n3 rows from MediaType table:\nMediaTypeId\tName\n1\tMPEG
      audio file\n2\tProtected AAC audio file\n3\tProtected MPEG-4 video file\n*/\n\n\nCREATE
      TABLE \"Playlist\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"PlaylistId\")\n)\n\n/*\n3 rows from Playlist table:\nPlaylistId\tName\n\n*/\n\n\nCREATE
      TABLE \"Album\" (\n\t\"AlbumId\" INTEGER NOT NULL, \n\t\"Title\" NVARCHAR(160)
      NOT NULL, \n\t\"ArtistId\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"AlbumId\"),
      \n\tFOREIGN KEY(\"ArtistId\") REFERENCES \"Artist\" (\"ArtistId\")\n)\n\n/*\n3
      rows from Album table:\nAlbumId\tTitle\tArtistId\n1\tFor Those About To Rock
      We Salute You\t1\n2\tBalls to the Wall\t2\n3\tRestless and Wild\t2\n*/\n\n\nCREATE
      TABLE \"Customer\" (\n\t\"CustomerId\" INTEGER NOT NULL, \n\t\"FirstName\" NVARCHAR(40)
      NOT NULL, \n\t\"LastName\" NVARCHAR(20) NOT NULL, \n\t\"Company\" NVARCHAR(80),
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60) NOT NULL,
      \n\t\"SupportRepId\" INTEGER, \n\tPRIMARY KEY (\"CustomerId\"), \n\tFOREIGN
      KEY(\"SupportRepId\") REFERENCES \"Employee\" (\"EmployeeId\")\n)\n\n/*\n3 rows
      from Customer table:\nCustomerId\tFirstName\tLastName\tCompany\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\tSupportRepId\n\n*/\n\n\nCREATE
      TABLE \"Invoice\" (\n\t\"InvoiceId\" INTEGER NOT NULL, \n\t\"CustomerId\" INTEGER
      NOT NULL, \n\t\"InvoiceDate\" DATETIME NOT NULL, \n\t\"BillingAddress\" NVARCHAR(70),
      \n\t\"BillingCity\" NVARCHAR(40), \n\t\"BillingState\" NVARCHAR(40), \n\t\"BillingCountry\"
      NVARCHAR(40), \n\t\"BillingPostalCode\" NVARCHAR(10), \n\t\"Total\" NUMERIC(10,
      2) NOT NULL, \n\tPRIMARY KEY (\"InvoiceId\"), \n\tFOREIGN KEY(\"CustomerId\")
      REFERENCES \"Customer\" (\"CustomerId\")\n)\n\n/*\n3 rows from Invoice table:\nInvoiceId\tCustomerId\tInvoiceDate\tBillingAddress\tBillingCity\tBillingState\tBillingCountry\tBillingPostalCode\tTotal\n\n*/\n\n\nCREATE
      TABLE \"Track\" (\n\t\"TrackId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(200)
      NOT NULL, \n\t\"AlbumId\" INTEGER, \n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"GenreId\"
      INTEGER, \n\t\"Composer\" NVARCHAR(220), \n\t\"Milliseconds\" INTEGER NOT NULL,
      \n\t\"Bytes\" INTEGER, \n\t\"UnitPrice\" NUMERIC(10, 2) NOT NULL, \n\tPRIMARY
      KEY (\"TrackId\"), \n\tFOREIGN KEY(\"MediaTypeId\") REFERENCES \"MediaType\"
      (\"MediaTypeId\"), \n\tFOREIGN KEY(\"GenreId\") REFERENCES \"Genre\" (\"GenreId\"),
      \n\tFOREIGN KEY(\"AlbumId\") REFERENCES \"Album\" (\"AlbumId\")\n)\n\n/*\n3
      rows from Track table:\nTrackId\tName\tAlbumId\tMediaTypeId\tGenreId\tComposer\tMilliseconds\tBytes\tUnitPrice\n1\tFor
      Those About To Rock (We Salute You)\t1\t1\t1\tAngus Young, Malcolm Young, Brian
      Johnson\t343719\t11170334\t0.99\n2\tBalls to the Wall\t2\t2\t1\tNone\t342562\t5510424\t0.99\n3\tFast
      As a Shark\t3\t2\t1\tF. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman\t230619\t3990994\t0.99\n*/\n\n\nCREATE
      TABLE \"InvoiceLine\" (\n\t\"InvoiceLineId\" INTEGER NOT NULL, \n\t\"InvoiceId\"
      INTEGER NOT NULL, \n\t\"TrackId\" INTEGER NOT NULL, \n\t\"UnitPrice\" NUMERIC(10,
      2) NOT NULL, \n\t\"Quantity\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"InvoiceLineId\"),
      \n\tFOREIGN KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN
      KEY(\"InvoiceId\") REFERENCES \"Invoice\" (\"InvoiceId\")\n)\n\n/*\n3 rows from
      InvoiceLine table:\nInvoiceLineId\tInvoiceId\tTrackId\tUnitPrice\tQuantity\n\n*/\n\n\nCREATE
      TABLE \"PlaylistTrack\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"TrackId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"PlaylistId\", \"TrackId\"), \n\tFOREIGN
      KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN KEY(\"PlaylistId\")
      REFERENCES \"Playlist\" (\"PlaylistId\")\n)\n\n/*\n3 rows from PlaylistTrack
      table:\nPlaylistId\tTrackId\n\n*/\n\nQuestion: What albums does Alanis Morissette
      have in the database?\nSQLQuery:SELECT \"Title\" FROM \"Album\" INNER JOIN \"Artist\"
      ON \"Album\".\"ArtistId\" = \"Artist\".\"ArtistId\" WHERE \"Name\" = ''Alanis
      Morissette'' LIMIT 5;\nSQLResult: [(''Jagged Little Pill'',)]\nAnswer:"], "model":
      "text-davinci-003", "temperature": 0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty":
      0, "presence_penalty": 0, "n": 1, "logit_bias": {}, "stop": ["\nSQLResult:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6806'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.7
    method: POST
    uri: https://api.openai.com/v1/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0zPzUrDQBSG4b1XMXzrqaRpbMvs7MJFf6AgIihSJpnTZOpkTsyclmLovYtF1PX7
        bN4B3sGgarswmq3b+ctTzqvDabb9bD82D8vn/WLV7x8XWQENLg9UCQyEzrKruO0CiecIjaonK+Rg
        xtP5XZEX+Xyi0bKj8MNHzp58rPwoyybfvmFfUYJ5Ha4ZBuo+2OiT2nDvUyIRUo1NShpSNpTHVi1t
        XZNTay8SSG19CMrHa3dWbGkT3ULDR0dnmEwjcN31XCaYeAxBY++jT82uJ5s4wiAJd7i8aRyTrQlm
        QNdz28lO+J1igsnzSabx9/kbxlMNYbHhHy2ml8vNFwAAAP//AwDDd59qTgEAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cf48d674ac63e6a-ADL
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 05:24:45 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-davinci-003
      openai-organization:
      - user-dpc5ftw8bvmpxblb49hwviq5
      openai-processing-ms:
      - '2298'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '250000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '249744'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 61ms
      x-request-id:
      - 506847947c994054e89cc6c1d93652ea
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\nThis was your previous work (but I haven''t seen
      any of it! I only see what you return as final answer):\nQuestion: What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\nThought: I should use the Search tool to find the
      answer to the first part of the question and then use the FooBar DB tool to
      find the answer to the second part.\nAction:\n```\n{\n  \"action\": \"Search\",\n  \"action_input\":
      \"Who recently released an album called ''The Storm Before the Calm''\"\n}\n```\n\nObservation:
      Alanis Morissette\nThought:Now that I know the artist''s name, I can use the
      FooBar DB tool to find out if they are in the database and what albums of theirs
      are in it.\nAction:\n```\n{\n  \"action\": \"FooBar DB\",\n  \"action_input\":
      \"What albums does Alanis Morissette have in the database?\"\n}\n```\n\n\nObservation:
      Alanis Morissette has the album Jagged Little Pill in the database.\nThought:"}],
      "model": "gpt-3.5-turbo", "max_tokens": null, "stream": false, "n": 1, "temperature":
      0.0, "stop": ["Observation:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2803'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7SOzU7DMBCE7zyFtWenSvpH5Vs5FAmKBBIIiR9Vm3ibGBw7eDdQUeXdURHQJ+A6
        M9/M7MFZMFA1KFXb+ex03S7KrX1/W99fhpuwezj9rKW/K87LnR+Dhli+UCU/xKiKbedJXAygoUqE
        QhZMMV/MpuPpeDHT0EZLHgzUnWST0SyTPpUxyyd5ARp6xprA7KFLse1kI/GVAoOZF4WGY/efPss1
        SBT0x+S8GDRUTXQVMZjHPbTEv60pegIDyOxYMMjhYwxC4fD/tiGFSRyLWnoMjtVVTI6ZREg5Vi4o
        aUitYjzDpCwKlsikMFjVIH976Mu+VRdY12TV2ol4UtfO+wPrZKSewsoF9GoZ+IOS+a8dGDRsXXDc
        bBIhxwAGWGIHGlywtAOTD8/DyRcAAAD//wMA39ofuuoBAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cf48d7768543e6a-ADL
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 05:24:49 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-dpc5ftw8bvmpxblb49hwviq5
      openai-processing-ms:
      - '4300'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89350'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 432ms
      x-request-id:
      - ed3df3b2394d3c123a17d3a8abad0828
    status:
      code: 200
      message: OK
version: 1
