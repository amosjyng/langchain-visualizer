interactions:
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\n"}], "model": "gpt-3.5-turbo", "stream": false,
      "n": 1, "temperature": 0.0, "stop": ["Observation:"]}'
    headers: {}
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xSTW/TQBC9+1eM9tJLEiVxE6hvLQipEoeiBpBgUTJej+2lu7PW7hiIovz3yk7a
        wJ3LHt7H6Om9PWQAylaqAGVaFOM7N337SX593Mzvv/pV3JvSf27yB3y4fb/6Vn6p1GRwhPInGXlx
        zUzwnSOxgU+0iYRCw9XFm/nierlc3CxGwoeK3GBrOpnms9VU+liG6Xy9yM/ONlhDSRXwPQMAOIzv
        kJEr+qMKmE9eEE8pYUOqeBUBqBjcgChMySZBFjW5kCawEI+xN23om1YKuAcmqkACJMJoWqhDBGkJ
        MIpNAr/bAJEMsbg9RHKEiSpABnRl78Ggc1TB1aYleJQQPdxRHSKNJ96h81eAXIFpyTyBrQd4DxgJ
        LI+SDyHcYYQKBUtMNNOs+dYMTRaad7ud5oNmAK1wBLUqQKvHMalWk7+preWul5Pgf2XXSvNxzKHO
        LR5f668t29RuI2EKPFSaJHQn2TED+DHO2f+zkOpi8J1sJTwRDxvn6/x0T11+0IVd35xJCYLugl/n
        y+ycRKV9EvLb2nJDsYt2XJd757Jj9gwAAP//AwB5tu/p3AIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 82ea3b5a68795ee5-PDX
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 01 Dec 2023 09:16:38 GMT
      Transfer-Encoding:
      - chunked
      openai-model:
      - gpt-3.5-turbo-0613
      openai-processing-ms:
      - '6864'
      x-ratelimit-limit-tokens_usage_based:
      - '60000'
      x-ratelimit-remaining-tokens_usage_based:
      - '59599'
      x-ratelimit-reset-tokens_usage_based:
      - 401ms
    status:
      code: 200
      message: OK
- request:
    body: null
    headers: {}
    method: GET
    uri: https://serpapi.com/search?engine=google&gl=us&google_domain=google.com&hl=en&output=json&q=artist+who+recently+released+an+album+called+%27The+Storm+Before+the+Calm%27&source=python
  response:
    body:
      string: !!binary |
        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
        //8DAOpDEKsusQAA
    headers:
      CF-Cache-Status:
      - MISS
      CF-Ray:
      - 82ea3b864fc1efce-PDX
      Cache-Control:
      - max-age=3600, public
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Fri, 01 Dec 2023 09:16:41 GMT
      ETag:
      - W/"e3b96fc2ce6da28a646c129f14484327"
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      referrer-policy:
      - strict-origin-when-cross-origin
      serpapi-search-id:
      - 6569a476c56d930786375d80
      x-content-type-options:
      - nosniff
      x-download-options:
      - noopen
      x-frame-options:
      - SAMEORIGIN
      x-permitted-cross-domain-policies:
      - none
      x-robots-tag:
      - noindex, nofollow
      x-runtime:
      - '2.414641'
      x-xss-protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\nThis was your previous work (but I haven''t seen
      any of it! I only see what you return as final answer):\nThought: I need to
      search for the artist who recently released an album called ''The Storm Before
      the Calm'' and check if they are in the FooBar database.\n\nAction:\n```\n{\n  \"action\":
      \"Search\",\n  \"action_input\": \"artist who recently released an album called
      ''The Storm Before the Calm''\"\n}\n```\nObservation: [''The Storm Before the
      Calm (stylized in all lowercase) is the tenth (and eighth international) studio
      album by Canadian-American singer-songwriter Alanis ...'', ''Alanis Morissette
      - the storm before the calm - Amazon.com Music.'', \"The Storm Before The Calm
      is Alanis''s first meditation album and features 11 song meditations written
      and recorded during the 2020/2021 pandemic.\", ''When the pandemic took hold
      in 2020, Alanis Morissette was on the verge of releasing a new album (Such Pretty
      Forks in the Road) as well as ...'', ''Discover The Storm Before the Calm by
      Alanis Morissette released in 2022. Find album reviews, track lists, credits,
      awards and more at ...'', ''View credits, reviews, tracks and shop for the 2022
      CD release of \"The Storm Before The Calm\" on Discogs ... Alanis Morissette
      - So-Called Chaos.'', ''Alanis Morissette gets super-chill. Welcome to \u201cStill
      Got It.\u201d New music from vintage musicians. Fresh every Wednesday.'', ''Seven-time
      GRAMMY\u00ae Award-winning singer/songwriter Alanis Morissette releases her
      first meditation album, the storm before the calm ...'', ''Alanis recently dropped
      an album titled The Storm Before The Calm. It is neither unplugged nor brash
      nor are the lyrics confessional ...'']\nThought:"}], "model": "gpt-3.5-turbo",
      "stream": false, "n": 1, "temperature": 0.0, "stop": ["Observation:"]}'
    headers: {}
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2SST08bMRDF7/spRr5wSaL8o8DeSCgVqopEi3qpq2TinWQN3pmVPWlKo3z3ajcJ
        AXHxYd77jZ/8vM0AjC9MDsaVqK6qQ/fyQf/8/DoK9eDqu38M9+PbL5/vpqVMn/49XJlOQ8jiiZwe
        qZ6Tqg6kXngvu0io1GwdXPQH4+Fw2B+0QiUFhQZb1dod9c67uo4L6fY/DUYHshTvKJkcfmUAANv2
        bDJyQX9NDv3OcVJRSrgik7+aAEyU0EwMpuSTIqvpnEQnrMRt7MeSAKP6pLApBSI5Yg0vECkQJioA
        GTAs1hU4DIEKOGuIHyqxggktJRJoSTDFUJ2BT3AdkH2CbxJ9SqRKPbiXDdwBExWgAq4k9wx++dHZ
        4J7bdbciE4xQoOICEwFy0SBJOrApUfeJEsgSSooJMNKRPCI9y5avXVNFbnk+n1veWgawBtuhNTlY
        c7jnZmJN560681yvde/5kNMay7vDTsvm8Ky71z6Wnn0qZ5EwCTdvnFTqvW2XAfxu+12/q8zUUapa
        ZyrPxE3pF+fD/T5z+lIn9fIoqiiGN/PRODskMeklKVWzpecVxTr6tm5eh5Dtsv8AAAD//wMAOnFS
        2u0CAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 82ea3b9789365ee5-PDX
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 01 Dec 2023 09:16:54 GMT
      Transfer-Encoding:
      - chunked
      openai-model:
      - gpt-3.5-turbo-0613
      openai-processing-ms:
      - '13182'
      x-ratelimit-limit-tokens_usage_based:
      - '60000'
      x-ratelimit-remaining-tokens_usage_based:
      - '59190'
      x-ratelimit-reset-tokens_usage_based:
      - 810ms
    status:
      code: 200
      message: OK
- request:
    body: '{"prompt": ["You are a SQLite expert. Given an input question, first create
      a syntactically correct SQLite query to run, then look at the results of the
      query and return the answer to the input question.\nUnless the user specifies
      in the question a specific number of examples to obtain, query for at most 5
      results using the LIMIT clause as per SQLite. You can order the results to return
      the most informative data in the database.\nNever query for all columns from
      a table. You must query only the columns that are needed to answer the question.
      Wrap each column name in double quotes (\") to denote them as delimited identifiers.\nPay
      attention to use only the column names you can see in the tables below. Be careful
      to not query for columns that do not exist. Also, pay attention to which column
      is in which table.\nPay attention to use date(''now'') function to get the current
      date, if the question involves \"today\".\n\nUse the following format:\n\nQuestion:
      Question here\nSQLQuery: SQL Query to run\nSQLResult: Result of the SQLQuery\nAnswer:
      Final answer here\n\nOnly use the following tables:\n\nCREATE TABLE \"Album\"
      (\n\t\"AlbumId\" INTEGER NOT NULL, \n\t\"Title\" NVARCHAR(160) NOT NULL, \n\t\"ArtistId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"AlbumId\"), \n\tFOREIGN KEY(\"ArtistId\")
      REFERENCES \"Artist\" (\"ArtistId\")\n)\n\n/*\n3 rows from Album table:\nAlbumId\tTitle\tArtistId\n1\tFor
      Those About To Rock We Salute You\t1\n2\tBalls to the Wall\t2\n3\tRestless and
      Wild\t2\n*/\n\n\nCREATE TABLE \"Artist\" (\n\t\"ArtistId\" INTEGER NOT NULL,
      \n\t\"Name\" NVARCHAR(120), \n\tPRIMARY KEY (\"ArtistId\")\n)\n\n/*\n3 rows
      from Artist table:\nArtistId\tName\n1\tAC/DC\n2\tAccept\n3\tAerosmith\n*/\n\n\nCREATE
      TABLE \"Customer\" (\n\t\"CustomerId\" INTEGER NOT NULL, \n\t\"FirstName\" NVARCHAR(40)
      NOT NULL, \n\t\"LastName\" NVARCHAR(20) NOT NULL, \n\t\"Company\" NVARCHAR(80),
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60) NOT NULL,
      \n\t\"SupportRepId\" INTEGER, \n\tPRIMARY KEY (\"CustomerId\"), \n\tFOREIGN
      KEY(\"SupportRepId\") REFERENCES \"Employee\" (\"EmployeeId\")\n)\n\n/*\n3 rows
      from Customer table:\nCustomerId\tFirstName\tLastName\tCompany\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\tSupportRepId\n\n*/\n\n\nCREATE
      TABLE \"Employee\" (\n\t\"EmployeeId\" INTEGER NOT NULL, \n\t\"LastName\" NVARCHAR(20)
      NOT NULL, \n\t\"FirstName\" NVARCHAR(20) NOT NULL, \n\t\"Title\" NVARCHAR(30),
      \n\t\"ReportsTo\" INTEGER, \n\t\"BirthDate\" DATETIME, \n\t\"HireDate\" DATETIME,
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60), \n\tPRIMARY
      KEY (\"EmployeeId\"), \n\tFOREIGN KEY(\"ReportsTo\") REFERENCES \"Employee\"
      (\"EmployeeId\")\n)\n\n/*\n3 rows from Employee table:\nEmployeeId\tLastName\tFirstName\tTitle\tReportsTo\tBirthDate\tHireDate\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\n\n*/\n\n\nCREATE
      TABLE \"Genre\" (\n\t\"GenreId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"GenreId\")\n)\n\n/*\n3 rows from Genre table:\nGenreId\tName\n1\tRock\n2\tJazz\n3\tMetal\n*/\n\n\nCREATE
      TABLE \"Invoice\" (\n\t\"InvoiceId\" INTEGER NOT NULL, \n\t\"CustomerId\" INTEGER
      NOT NULL, \n\t\"InvoiceDate\" DATETIME NOT NULL, \n\t\"BillingAddress\" NVARCHAR(70),
      \n\t\"BillingCity\" NVARCHAR(40), \n\t\"BillingState\" NVARCHAR(40), \n\t\"BillingCountry\"
      NVARCHAR(40), \n\t\"BillingPostalCode\" NVARCHAR(10), \n\t\"Total\" NUMERIC(10,
      2) NOT NULL, \n\tPRIMARY KEY (\"InvoiceId\"), \n\tFOREIGN KEY(\"CustomerId\")
      REFERENCES \"Customer\" (\"CustomerId\")\n)\n\n/*\n3 rows from Invoice table:\nInvoiceId\tCustomerId\tInvoiceDate\tBillingAddress\tBillingCity\tBillingState\tBillingCountry\tBillingPostalCode\tTotal\n\n*/\n\n\nCREATE
      TABLE \"InvoiceLine\" (\n\t\"InvoiceLineId\" INTEGER NOT NULL, \n\t\"InvoiceId\"
      INTEGER NOT NULL, \n\t\"TrackId\" INTEGER NOT NULL, \n\t\"UnitPrice\" NUMERIC(10,
      2) NOT NULL, \n\t\"Quantity\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"InvoiceLineId\"),
      \n\tFOREIGN KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN
      KEY(\"InvoiceId\") REFERENCES \"Invoice\" (\"InvoiceId\")\n)\n\n/*\n3 rows from
      InvoiceLine table:\nInvoiceLineId\tInvoiceId\tTrackId\tUnitPrice\tQuantity\n\n*/\n\n\nCREATE
      TABLE \"MediaType\" (\n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"MediaTypeId\")\n)\n\n/*\n3 rows from MediaType table:\nMediaTypeId\tName\n1\tMPEG
      audio file\n2\tProtected AAC audio file\n3\tProtected MPEG-4 video file\n*/\n\n\nCREATE
      TABLE \"Playlist\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"PlaylistId\")\n)\n\n/*\n3 rows from Playlist table:\nPlaylistId\tName\n\n*/\n\n\nCREATE
      TABLE \"PlaylistTrack\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"TrackId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"PlaylistId\", \"TrackId\"), \n\tFOREIGN
      KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN KEY(\"PlaylistId\")
      REFERENCES \"Playlist\" (\"PlaylistId\")\n)\n\n/*\n3 rows from PlaylistTrack
      table:\nPlaylistId\tTrackId\n\n*/\n\n\nCREATE TABLE \"Track\" (\n\t\"TrackId\"
      INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(200) NOT NULL, \n\t\"AlbumId\" INTEGER,
      \n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"GenreId\" INTEGER, \n\t\"Composer\"
      NVARCHAR(220), \n\t\"Milliseconds\" INTEGER NOT NULL, \n\t\"Bytes\" INTEGER,
      \n\t\"UnitPrice\" NUMERIC(10, 2) NOT NULL, \n\tPRIMARY KEY (\"TrackId\"), \n\tFOREIGN
      KEY(\"MediaTypeId\") REFERENCES \"MediaType\" (\"MediaTypeId\"), \n\tFOREIGN
      KEY(\"GenreId\") REFERENCES \"Genre\" (\"GenreId\"), \n\tFOREIGN KEY(\"AlbumId\")
      REFERENCES \"Album\" (\"AlbumId\")\n)\n\n/*\n3 rows from Track table:\nTrackId\tName\tAlbumId\tMediaTypeId\tGenreId\tComposer\tMilliseconds\tBytes\tUnitPrice\n1\tFor
      Those About To Rock (We Salute You)\t1\t1\t1\tAngus Young, Malcolm Young, Brian
      Johnson\t343719\t11170334\t0.99\n2\tBalls to the Wall\t2\t2\t1\tNone\t342562\t5510424\t0.99\n3\tFast
      As a Shark\t3\t2\t1\tF. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman\t230619\t3990994\t0.99\n*/\n\nQuestion:
      Alanis Morissette\nSQLQuery:"], "model": "text-davinci-003", "temperature":
      0.0, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "logit_bias":
      {}, "max_tokens": 256, "stop": ["\nSQLResult:"]}'
    headers: {}
    method: POST
    uri: https://api.openai.com/v1/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0xQS2/bMAy++1cQAopemsRx3TXwTkHnYVmTFc0CtMAyBLJMJ2wtUZMUr0PR/z7I
        SR8XHvjxe/E5ARB/pTNktqIAsdqRB801ttCh88QGyEON1qGSAeshLGjrZECosGGH8F2avXT/ID+D
        LM1yCAyyY6qhJu/2NkQFbsCj60jhEOYonQEdqbsQrC9GI9vK0LDTQ7ZoJA0V61HNyo9ebYmNF2cx
        KdUxpNK2HUxuQ0dXt9c307tzqi7vl3+4etSr5kF/6e4P11w9oAqREfApbBRr22JUO8DKYawkChhf
        puM8y7Jx3gN9/1faoJYdGUWDND0/8nZMCr0o4FcCAPDcTzicRxr8LOfl1QrW4ofUuBbwdXmzgLWY
        ukA+rAXcfSuX5Ts8n12XcHoybaUhDwt25D2GgCenMJ8tZiu4+Nw79yZkanwSBaRvm5a31nEVA5l9
        277tGzLkdxuH0rOJuXxgK3r0JQH43ZfZe7lFURxLCOtY27AJ/IgmCmbji8lBULy/7wP86QgGDrL9
        SJvkSbR5Sf4DAAD//wMAeIbTamICAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 82ea3beabe515ee5-PDX
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 01 Dec 2023 09:16:55 GMT
      Transfer-Encoding:
      - chunked
      openai-model:
      - text-davinci-003
      openai-processing-ms:
      - '842'
      x-ratelimit-limit-tokens_usage_based:
      - '250000'
      x-ratelimit-remaining-tokens_usage_based:
      - '249744'
      x-ratelimit-reset-tokens_usage_based:
      - 61ms
    status:
      code: 200
      message: OK
- request:
    body: '{"prompt": ["You are a SQLite expert. Given an input question, first create
      a syntactically correct SQLite query to run, then look at the results of the
      query and return the answer to the input question.\nUnless the user specifies
      in the question a specific number of examples to obtain, query for at most 5
      results using the LIMIT clause as per SQLite. You can order the results to return
      the most informative data in the database.\nNever query for all columns from
      a table. You must query only the columns that are needed to answer the question.
      Wrap each column name in double quotes (\") to denote them as delimited identifiers.\nPay
      attention to use only the column names you can see in the tables below. Be careful
      to not query for columns that do not exist. Also, pay attention to which column
      is in which table.\nPay attention to use date(''now'') function to get the current
      date, if the question involves \"today\".\n\nUse the following format:\n\nQuestion:
      Question here\nSQLQuery: SQL Query to run\nSQLResult: Result of the SQLQuery\nAnswer:
      Final answer here\n\nOnly use the following tables:\n\nCREATE TABLE \"Album\"
      (\n\t\"AlbumId\" INTEGER NOT NULL, \n\t\"Title\" NVARCHAR(160) NOT NULL, \n\t\"ArtistId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"AlbumId\"), \n\tFOREIGN KEY(\"ArtistId\")
      REFERENCES \"Artist\" (\"ArtistId\")\n)\n\n/*\n3 rows from Album table:\nAlbumId\tTitle\tArtistId\n1\tFor
      Those About To Rock We Salute You\t1\n2\tBalls to the Wall\t2\n3\tRestless and
      Wild\t2\n*/\n\n\nCREATE TABLE \"Artist\" (\n\t\"ArtistId\" INTEGER NOT NULL,
      \n\t\"Name\" NVARCHAR(120), \n\tPRIMARY KEY (\"ArtistId\")\n)\n\n/*\n3 rows
      from Artist table:\nArtistId\tName\n1\tAC/DC\n2\tAccept\n3\tAerosmith\n*/\n\n\nCREATE
      TABLE \"Customer\" (\n\t\"CustomerId\" INTEGER NOT NULL, \n\t\"FirstName\" NVARCHAR(40)
      NOT NULL, \n\t\"LastName\" NVARCHAR(20) NOT NULL, \n\t\"Company\" NVARCHAR(80),
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60) NOT NULL,
      \n\t\"SupportRepId\" INTEGER, \n\tPRIMARY KEY (\"CustomerId\"), \n\tFOREIGN
      KEY(\"SupportRepId\") REFERENCES \"Employee\" (\"EmployeeId\")\n)\n\n/*\n3 rows
      from Customer table:\nCustomerId\tFirstName\tLastName\tCompany\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\tSupportRepId\n\n*/\n\n\nCREATE
      TABLE \"Employee\" (\n\t\"EmployeeId\" INTEGER NOT NULL, \n\t\"LastName\" NVARCHAR(20)
      NOT NULL, \n\t\"FirstName\" NVARCHAR(20) NOT NULL, \n\t\"Title\" NVARCHAR(30),
      \n\t\"ReportsTo\" INTEGER, \n\t\"BirthDate\" DATETIME, \n\t\"HireDate\" DATETIME,
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60), \n\tPRIMARY
      KEY (\"EmployeeId\"), \n\tFOREIGN KEY(\"ReportsTo\") REFERENCES \"Employee\"
      (\"EmployeeId\")\n)\n\n/*\n3 rows from Employee table:\nEmployeeId\tLastName\tFirstName\tTitle\tReportsTo\tBirthDate\tHireDate\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\n\n*/\n\n\nCREATE
      TABLE \"Genre\" (\n\t\"GenreId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"GenreId\")\n)\n\n/*\n3 rows from Genre table:\nGenreId\tName\n1\tRock\n2\tJazz\n3\tMetal\n*/\n\n\nCREATE
      TABLE \"Invoice\" (\n\t\"InvoiceId\" INTEGER NOT NULL, \n\t\"CustomerId\" INTEGER
      NOT NULL, \n\t\"InvoiceDate\" DATETIME NOT NULL, \n\t\"BillingAddress\" NVARCHAR(70),
      \n\t\"BillingCity\" NVARCHAR(40), \n\t\"BillingState\" NVARCHAR(40), \n\t\"BillingCountry\"
      NVARCHAR(40), \n\t\"BillingPostalCode\" NVARCHAR(10), \n\t\"Total\" NUMERIC(10,
      2) NOT NULL, \n\tPRIMARY KEY (\"InvoiceId\"), \n\tFOREIGN KEY(\"CustomerId\")
      REFERENCES \"Customer\" (\"CustomerId\")\n)\n\n/*\n3 rows from Invoice table:\nInvoiceId\tCustomerId\tInvoiceDate\tBillingAddress\tBillingCity\tBillingState\tBillingCountry\tBillingPostalCode\tTotal\n\n*/\n\n\nCREATE
      TABLE \"InvoiceLine\" (\n\t\"InvoiceLineId\" INTEGER NOT NULL, \n\t\"InvoiceId\"
      INTEGER NOT NULL, \n\t\"TrackId\" INTEGER NOT NULL, \n\t\"UnitPrice\" NUMERIC(10,
      2) NOT NULL, \n\t\"Quantity\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"InvoiceLineId\"),
      \n\tFOREIGN KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN
      KEY(\"InvoiceId\") REFERENCES \"Invoice\" (\"InvoiceId\")\n)\n\n/*\n3 rows from
      InvoiceLine table:\nInvoiceLineId\tInvoiceId\tTrackId\tUnitPrice\tQuantity\n\n*/\n\n\nCREATE
      TABLE \"MediaType\" (\n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"MediaTypeId\")\n)\n\n/*\n3 rows from MediaType table:\nMediaTypeId\tName\n1\tMPEG
      audio file\n2\tProtected AAC audio file\n3\tProtected MPEG-4 video file\n*/\n\n\nCREATE
      TABLE \"Playlist\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"PlaylistId\")\n)\n\n/*\n3 rows from Playlist table:\nPlaylistId\tName\n\n*/\n\n\nCREATE
      TABLE \"PlaylistTrack\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"TrackId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"PlaylistId\", \"TrackId\"), \n\tFOREIGN
      KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN KEY(\"PlaylistId\")
      REFERENCES \"Playlist\" (\"PlaylistId\")\n)\n\n/*\n3 rows from PlaylistTrack
      table:\nPlaylistId\tTrackId\n\n*/\n\n\nCREATE TABLE \"Track\" (\n\t\"TrackId\"
      INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(200) NOT NULL, \n\t\"AlbumId\" INTEGER,
      \n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"GenreId\" INTEGER, \n\t\"Composer\"
      NVARCHAR(220), \n\t\"Milliseconds\" INTEGER NOT NULL, \n\t\"Bytes\" INTEGER,
      \n\t\"UnitPrice\" NUMERIC(10, 2) NOT NULL, \n\tPRIMARY KEY (\"TrackId\"), \n\tFOREIGN
      KEY(\"MediaTypeId\") REFERENCES \"MediaType\" (\"MediaTypeId\"), \n\tFOREIGN
      KEY(\"GenreId\") REFERENCES \"Genre\" (\"GenreId\"), \n\tFOREIGN KEY(\"AlbumId\")
      REFERENCES \"Album\" (\"AlbumId\")\n)\n\n/*\n3 rows from Track table:\nTrackId\tName\tAlbumId\tMediaTypeId\tGenreId\tComposer\tMilliseconds\tBytes\tUnitPrice\n1\tFor
      Those About To Rock (We Salute You)\t1\t1\t1\tAngus Young, Malcolm Young, Brian
      Johnson\t343719\t11170334\t0.99\n2\tBalls to the Wall\t2\t2\t1\tNone\t342562\t5510424\t0.99\n3\tFast
      As a Shark\t3\t2\t1\tF. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman\t230619\t3990994\t0.99\n*/\n\nQuestion:
      Alanis Morissette\nSQLQuery:SELECT \"Name\" FROM \"Artist\" WHERE \"Name\" LIKE
      ''%Alanis Morissette%'' LIMIT 5;\nSQLResult: [(''Alanis Morissette'',)]\nAnswer:"],
      "model": "text-davinci-003", "temperature": 0.0, "top_p": 1, "frequency_penalty":
      0, "presence_penalty": 0, "n": 1, "logit_bias": {}, "max_tokens": 256, "stop":
      ["\nSQLResult:"]}'
    headers: {}
    method: POST
    uri: https://api.openai.com/v1/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SPQU8bQQyF7/srrDmTZLOElO4NuFSFULXihlA0mXESw+x4NPYuqRD/vZpNAPXi
        g9/7np/fKgDzanOkuDMtmIc9CXTsMcCAWYgjkIDHlNFZRT+FFe2yVYQNbjkj/LSxt/kvLM6gqZsF
        KIMdmDx4ktwnLQm8BcE8kMMp3KHNEbqC7lWTtLNZCla3nLspJ4yWpo67mWcns4+zxFHMWWlKvpR0
        XQqTy986vFzLzfPN9/v+9fYgnpfLH+cPv+q71Z+jmzfP6LQQigddO+5SwJJ2lF3G8pJpYf6tni+a
        ppkvR2H8/wObeDtQdDSp6/MTt2dyKKaFxwoA4G2ccLQXDK6CjSSw4kwiqIojOHooejyYFurPTeBd
        yrwpebEP4XO/pUiyX2e0wrHEinIyo/peATyNXXqxOzTtqYNJmbuka+UXjCWwaerTIfP1/Zd8cdKU
        1Yb/qIuqXHmv/gEAAP//AwCgw+JTIAIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 82ea3bf1385a5ee5-PDX
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 01 Dec 2023 09:16:56 GMT
      Transfer-Encoding:
      - chunked
      openai-model:
      - text-davinci-003
      openai-processing-ms:
      - '532'
      x-ratelimit-limit-tokens_usage_based:
      - '250000'
      x-ratelimit-remaining-tokens_usage_based:
      - '248154'
      x-ratelimit-reset-tokens_usage_based:
      - 442ms
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\nThis was your previous work (but I haven''t seen
      any of it! I only see what you return as final answer):\nThought: I need to
      search for the artist who recently released an album called ''The Storm Before
      the Calm'' and check if they are in the FooBar database.\n\nAction:\n```\n{\n  \"action\":
      \"Search\",\n  \"action_input\": \"artist who recently released an album called
      ''The Storm Before the Calm''\"\n}\n```\nObservation: [''The Storm Before the
      Calm (stylized in all lowercase) is the tenth (and eighth international) studio
      album by Canadian-American singer-songwriter Alanis ...'', ''Alanis Morissette
      - the storm before the calm - Amazon.com Music.'', \"The Storm Before The Calm
      is Alanis''s first meditation album and features 11 song meditations written
      and recorded during the 2020/2021 pandemic.\", ''When the pandemic took hold
      in 2020, Alanis Morissette was on the verge of releasing a new album (Such Pretty
      Forks in the Road) as well as ...'', ''Discover The Storm Before the Calm by
      Alanis Morissette released in 2022. Find album reviews, track lists, credits,
      awards and more at ...'', ''View credits, reviews, tracks and shop for the 2022
      CD release of \"The Storm Before The Calm\" on Discogs ... Alanis Morissette
      - So-Called Chaos.'', ''Alanis Morissette gets super-chill. Welcome to \u201cStill
      Got It.\u201d New music from vintage musicians. Fresh every Wednesday.'', ''Seven-time
      GRAMMY\u00ae Award-winning singer/songwriter Alanis Morissette releases her
      first meditation album, the storm before the calm ...'', ''Alanis recently dropped
      an album titled The Storm Before The Calm. It is neither unplugged nor brash
      nor are the lyrics confessional ...'']\nThought:The artist who recently released
      an album called ''The Storm Before the Calm'' is Alanis Morissette. Now I need
      to check if Alanis Morissette is in the FooBar database and if so, what albums
      of hers are in the database.\n\nAction:\n```\n{\n  \"action\": \"FooBar DB\",\n  \"action_input\":
      \"Alanis Morissette\"\n}\n```\n\n\nObservation: Alanis Morissette\nThought:"}],
      "model": "gpt-3.5-turbo", "stream": false, "n": 1, "temperature": 0.0, "stop":
      ["Observation:"]}'
    headers: {}
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2RRXWvbQBB8169Y9tk2kuOPVG8JoZBACoVASnvFPklr6xppV9yt4hjj/14ky3ZL
        Xu5hZmdudvYQAaArMAXMS6t53VTj2+/6/iYvom0c+93y9f1p8THN5/MfP/dPBY46hWR/KNezapJL
        3VSkTvhE556sUueaLONkNp1Ok0VP1FJQ1cm2jY5vJvOxtj6TcbxIbgZlKS6ngCn8igAADv3bZeSC
        PjCFeHRGagrBbgnTyxAAeqk6BG0ILqhlxdGVzIWVuI99V1l2AZ7FuxBIlcAFcAxaEnwVubceCqs2
        s4Em8E128AhMVIAKbBwXIK3CrrQKtsraOoBsoCQfwHo621z0hg3f5V07qeH1em34YBjAoO1BgykY
        HD59uDc4+pddOW5aPc0Mf2V7+BTfoOFj747DvsdLURvHLpQrTzYId8sHleY0dowAfvfFt/91iY2X
        utGVyhtxd43b2ezkh9dbX9n5ciBV1FZX/EucREMSDPugVK82jrfkG+/6O3BbVdEx+gsAAP//AwCH
        O0hMhgIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 82ea3bf529a45ee5-PDX
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 01 Dec 2023 09:17:03 GMT
      Transfer-Encoding:
      - chunked
      openai-model:
      - gpt-3.5-turbo-0613
      openai-processing-ms:
      - '7206'
      x-ratelimit-limit-tokens_usage_based:
      - '60000'
      x-ratelimit-remaining-tokens_usage_based:
      - '59104'
      x-ratelimit-reset-tokens_usage_based:
      - 896ms
    status:
      code: 200
      message: OK
- request:
    body: '{"prompt": ["You are a SQLite expert. Given an input question, first create
      a syntactically correct SQLite query to run, then look at the results of the
      query and return the answer to the input question.\nUnless the user specifies
      in the question a specific number of examples to obtain, query for at most 5
      results using the LIMIT clause as per SQLite. You can order the results to return
      the most informative data in the database.\nNever query for all columns from
      a table. You must query only the columns that are needed to answer the question.
      Wrap each column name in double quotes (\") to denote them as delimited identifiers.\nPay
      attention to use only the column names you can see in the tables below. Be careful
      to not query for columns that do not exist. Also, pay attention to which column
      is in which table.\nPay attention to use date(''now'') function to get the current
      date, if the question involves \"today\".\n\nUse the following format:\n\nQuestion:
      Question here\nSQLQuery: SQL Query to run\nSQLResult: Result of the SQLQuery\nAnswer:
      Final answer here\n\nOnly use the following tables:\n\nCREATE TABLE \"Album\"
      (\n\t\"AlbumId\" INTEGER NOT NULL, \n\t\"Title\" NVARCHAR(160) NOT NULL, \n\t\"ArtistId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"AlbumId\"), \n\tFOREIGN KEY(\"ArtistId\")
      REFERENCES \"Artist\" (\"ArtistId\")\n)\n\n/*\n3 rows from Album table:\nAlbumId\tTitle\tArtistId\n1\tFor
      Those About To Rock We Salute You\t1\n2\tBalls to the Wall\t2\n3\tRestless and
      Wild\t2\n*/\n\n\nCREATE TABLE \"Artist\" (\n\t\"ArtistId\" INTEGER NOT NULL,
      \n\t\"Name\" NVARCHAR(120), \n\tPRIMARY KEY (\"ArtistId\")\n)\n\n/*\n3 rows
      from Artist table:\nArtistId\tName\n1\tAC/DC\n2\tAccept\n3\tAerosmith\n*/\n\n\nCREATE
      TABLE \"Customer\" (\n\t\"CustomerId\" INTEGER NOT NULL, \n\t\"FirstName\" NVARCHAR(40)
      NOT NULL, \n\t\"LastName\" NVARCHAR(20) NOT NULL, \n\t\"Company\" NVARCHAR(80),
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60) NOT NULL,
      \n\t\"SupportRepId\" INTEGER, \n\tPRIMARY KEY (\"CustomerId\"), \n\tFOREIGN
      KEY(\"SupportRepId\") REFERENCES \"Employee\" (\"EmployeeId\")\n)\n\n/*\n3 rows
      from Customer table:\nCustomerId\tFirstName\tLastName\tCompany\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\tSupportRepId\n\n*/\n\n\nCREATE
      TABLE \"Employee\" (\n\t\"EmployeeId\" INTEGER NOT NULL, \n\t\"LastName\" NVARCHAR(20)
      NOT NULL, \n\t\"FirstName\" NVARCHAR(20) NOT NULL, \n\t\"Title\" NVARCHAR(30),
      \n\t\"ReportsTo\" INTEGER, \n\t\"BirthDate\" DATETIME, \n\t\"HireDate\" DATETIME,
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60), \n\tPRIMARY
      KEY (\"EmployeeId\"), \n\tFOREIGN KEY(\"ReportsTo\") REFERENCES \"Employee\"
      (\"EmployeeId\")\n)\n\n/*\n3 rows from Employee table:\nEmployeeId\tLastName\tFirstName\tTitle\tReportsTo\tBirthDate\tHireDate\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\n\n*/\n\n\nCREATE
      TABLE \"Genre\" (\n\t\"GenreId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"GenreId\")\n)\n\n/*\n3 rows from Genre table:\nGenreId\tName\n1\tRock\n2\tJazz\n3\tMetal\n*/\n\n\nCREATE
      TABLE \"Invoice\" (\n\t\"InvoiceId\" INTEGER NOT NULL, \n\t\"CustomerId\" INTEGER
      NOT NULL, \n\t\"InvoiceDate\" DATETIME NOT NULL, \n\t\"BillingAddress\" NVARCHAR(70),
      \n\t\"BillingCity\" NVARCHAR(40), \n\t\"BillingState\" NVARCHAR(40), \n\t\"BillingCountry\"
      NVARCHAR(40), \n\t\"BillingPostalCode\" NVARCHAR(10), \n\t\"Total\" NUMERIC(10,
      2) NOT NULL, \n\tPRIMARY KEY (\"InvoiceId\"), \n\tFOREIGN KEY(\"CustomerId\")
      REFERENCES \"Customer\" (\"CustomerId\")\n)\n\n/*\n3 rows from Invoice table:\nInvoiceId\tCustomerId\tInvoiceDate\tBillingAddress\tBillingCity\tBillingState\tBillingCountry\tBillingPostalCode\tTotal\n\n*/\n\n\nCREATE
      TABLE \"InvoiceLine\" (\n\t\"InvoiceLineId\" INTEGER NOT NULL, \n\t\"InvoiceId\"
      INTEGER NOT NULL, \n\t\"TrackId\" INTEGER NOT NULL, \n\t\"UnitPrice\" NUMERIC(10,
      2) NOT NULL, \n\t\"Quantity\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"InvoiceLineId\"),
      \n\tFOREIGN KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN
      KEY(\"InvoiceId\") REFERENCES \"Invoice\" (\"InvoiceId\")\n)\n\n/*\n3 rows from
      InvoiceLine table:\nInvoiceLineId\tInvoiceId\tTrackId\tUnitPrice\tQuantity\n\n*/\n\n\nCREATE
      TABLE \"MediaType\" (\n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"MediaTypeId\")\n)\n\n/*\n3 rows from MediaType table:\nMediaTypeId\tName\n1\tMPEG
      audio file\n2\tProtected AAC audio file\n3\tProtected MPEG-4 video file\n*/\n\n\nCREATE
      TABLE \"Playlist\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"PlaylistId\")\n)\n\n/*\n3 rows from Playlist table:\nPlaylistId\tName\n\n*/\n\n\nCREATE
      TABLE \"PlaylistTrack\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"TrackId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"PlaylistId\", \"TrackId\"), \n\tFOREIGN
      KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN KEY(\"PlaylistId\")
      REFERENCES \"Playlist\" (\"PlaylistId\")\n)\n\n/*\n3 rows from PlaylistTrack
      table:\nPlaylistId\tTrackId\n\n*/\n\n\nCREATE TABLE \"Track\" (\n\t\"TrackId\"
      INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(200) NOT NULL, \n\t\"AlbumId\" INTEGER,
      \n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"GenreId\" INTEGER, \n\t\"Composer\"
      NVARCHAR(220), \n\t\"Milliseconds\" INTEGER NOT NULL, \n\t\"Bytes\" INTEGER,
      \n\t\"UnitPrice\" NUMERIC(10, 2) NOT NULL, \n\tPRIMARY KEY (\"TrackId\"), \n\tFOREIGN
      KEY(\"MediaTypeId\") REFERENCES \"MediaType\" (\"MediaTypeId\"), \n\tFOREIGN
      KEY(\"GenreId\") REFERENCES \"Genre\" (\"GenreId\"), \n\tFOREIGN KEY(\"AlbumId\")
      REFERENCES \"Album\" (\"AlbumId\")\n)\n\n/*\n3 rows from Track table:\nTrackId\tName\tAlbumId\tMediaTypeId\tGenreId\tComposer\tMilliseconds\tBytes\tUnitPrice\n1\tFor
      Those About To Rock (We Salute You)\t1\t1\t1\tAngus Young, Malcolm Young, Brian
      Johnson\t343719\t11170334\t0.99\n2\tBalls to the Wall\t2\t2\t1\tNone\t342562\t5510424\t0.99\n3\tFast
      As a Shark\t3\t2\t1\tF. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman\t230619\t3990994\t0.99\n*/\n\nQuestion:
      albums by Alanis Morissette\nSQLQuery:"], "model": "text-davinci-003", "temperature":
      0.0, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "logit_bias":
      {}, "max_tokens": 256, "stop": ["\nSQLResult:"]}'
    headers: {}
    method: POST
    uri: https://api.openai.com/v1/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1RRTW8aMRC98ytGvuQSYNnSptmqh6ha1E1gaQAph26FjHeASb0eyzYkVZT/XnmB
        kFx8eB8z741fOgDiSTpDZiMyEIsteWi4Rg17dJ7YAHmo0TpUMmDdgwltnAwIK1yzQ7iVZifdPxhe
        QpqkQwgMcs9UQ03e7WyIE3gNHt2eFPZgjNIZaKJ1G4L1Wb9vtQxrdk2PLRpJPcVNv2bl+6e1xMaL
        y5iU6hhSNVZ3v96Hvbfp42w9mt/Z0dXdiHIu7tWveen4oObVI6oQHQGfw1JxYzXGaQdaOYyVRAaD
        q2QwTNM0HbZE2/9k69ZyT0ZRN0k+HX1bJoVeZPC7AwDw0r5wkEcbzPNx/mMBlVhQ0FgJGM2mE6jE
        jV7tmkpAUZb5DG6nRRlBF8iHSsC0PEt6J7yoKwHf38k+Mg8/81kOlShlg63w4kZLQx4m7Mh7DAEv
        YFxMigV8/tbGb5OSqfFZZJC8IZo31vEqtjI7rd/wNRny26VD6dnEcj6wFS372gH4015k5+UGRXa8
        hLCOGxuWgf+iiQPTwZfjInH+gzM9vD6SgYPU72xpct2Ja147/wEAAP//AwC9zt0KpwIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 82ea3c23aa1b5ee5-PDX
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 01 Dec 2023 09:17:05 GMT
      Transfer-Encoding:
      - chunked
      openai-model:
      - text-davinci-003
      openai-processing-ms:
      - '1049'
      x-ratelimit-limit-tokens_usage_based:
      - '250000'
      x-ratelimit-remaining-tokens_usage_based:
      - '249744'
      x-ratelimit-reset-tokens_usage_based:
      - 61ms
    status:
      code: 200
      message: OK
- request:
    body: '{"prompt": ["You are a SQLite expert. Given an input question, first create
      a syntactically correct SQLite query to run, then look at the results of the
      query and return the answer to the input question.\nUnless the user specifies
      in the question a specific number of examples to obtain, query for at most 5
      results using the LIMIT clause as per SQLite. You can order the results to return
      the most informative data in the database.\nNever query for all columns from
      a table. You must query only the columns that are needed to answer the question.
      Wrap each column name in double quotes (\") to denote them as delimited identifiers.\nPay
      attention to use only the column names you can see in the tables below. Be careful
      to not query for columns that do not exist. Also, pay attention to which column
      is in which table.\nPay attention to use date(''now'') function to get the current
      date, if the question involves \"today\".\n\nUse the following format:\n\nQuestion:
      Question here\nSQLQuery: SQL Query to run\nSQLResult: Result of the SQLQuery\nAnswer:
      Final answer here\n\nOnly use the following tables:\n\nCREATE TABLE \"Album\"
      (\n\t\"AlbumId\" INTEGER NOT NULL, \n\t\"Title\" NVARCHAR(160) NOT NULL, \n\t\"ArtistId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"AlbumId\"), \n\tFOREIGN KEY(\"ArtistId\")
      REFERENCES \"Artist\" (\"ArtistId\")\n)\n\n/*\n3 rows from Album table:\nAlbumId\tTitle\tArtistId\n1\tFor
      Those About To Rock We Salute You\t1\n2\tBalls to the Wall\t2\n3\tRestless and
      Wild\t2\n*/\n\n\nCREATE TABLE \"Artist\" (\n\t\"ArtistId\" INTEGER NOT NULL,
      \n\t\"Name\" NVARCHAR(120), \n\tPRIMARY KEY (\"ArtistId\")\n)\n\n/*\n3 rows
      from Artist table:\nArtistId\tName\n1\tAC/DC\n2\tAccept\n3\tAerosmith\n*/\n\n\nCREATE
      TABLE \"Customer\" (\n\t\"CustomerId\" INTEGER NOT NULL, \n\t\"FirstName\" NVARCHAR(40)
      NOT NULL, \n\t\"LastName\" NVARCHAR(20) NOT NULL, \n\t\"Company\" NVARCHAR(80),
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60) NOT NULL,
      \n\t\"SupportRepId\" INTEGER, \n\tPRIMARY KEY (\"CustomerId\"), \n\tFOREIGN
      KEY(\"SupportRepId\") REFERENCES \"Employee\" (\"EmployeeId\")\n)\n\n/*\n3 rows
      from Customer table:\nCustomerId\tFirstName\tLastName\tCompany\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\tSupportRepId\n\n*/\n\n\nCREATE
      TABLE \"Employee\" (\n\t\"EmployeeId\" INTEGER NOT NULL, \n\t\"LastName\" NVARCHAR(20)
      NOT NULL, \n\t\"FirstName\" NVARCHAR(20) NOT NULL, \n\t\"Title\" NVARCHAR(30),
      \n\t\"ReportsTo\" INTEGER, \n\t\"BirthDate\" DATETIME, \n\t\"HireDate\" DATETIME,
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60), \n\tPRIMARY
      KEY (\"EmployeeId\"), \n\tFOREIGN KEY(\"ReportsTo\") REFERENCES \"Employee\"
      (\"EmployeeId\")\n)\n\n/*\n3 rows from Employee table:\nEmployeeId\tLastName\tFirstName\tTitle\tReportsTo\tBirthDate\tHireDate\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\n\n*/\n\n\nCREATE
      TABLE \"Genre\" (\n\t\"GenreId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"GenreId\")\n)\n\n/*\n3 rows from Genre table:\nGenreId\tName\n1\tRock\n2\tJazz\n3\tMetal\n*/\n\n\nCREATE
      TABLE \"Invoice\" (\n\t\"InvoiceId\" INTEGER NOT NULL, \n\t\"CustomerId\" INTEGER
      NOT NULL, \n\t\"InvoiceDate\" DATETIME NOT NULL, \n\t\"BillingAddress\" NVARCHAR(70),
      \n\t\"BillingCity\" NVARCHAR(40), \n\t\"BillingState\" NVARCHAR(40), \n\t\"BillingCountry\"
      NVARCHAR(40), \n\t\"BillingPostalCode\" NVARCHAR(10), \n\t\"Total\" NUMERIC(10,
      2) NOT NULL, \n\tPRIMARY KEY (\"InvoiceId\"), \n\tFOREIGN KEY(\"CustomerId\")
      REFERENCES \"Customer\" (\"CustomerId\")\n)\n\n/*\n3 rows from Invoice table:\nInvoiceId\tCustomerId\tInvoiceDate\tBillingAddress\tBillingCity\tBillingState\tBillingCountry\tBillingPostalCode\tTotal\n\n*/\n\n\nCREATE
      TABLE \"InvoiceLine\" (\n\t\"InvoiceLineId\" INTEGER NOT NULL, \n\t\"InvoiceId\"
      INTEGER NOT NULL, \n\t\"TrackId\" INTEGER NOT NULL, \n\t\"UnitPrice\" NUMERIC(10,
      2) NOT NULL, \n\t\"Quantity\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"InvoiceLineId\"),
      \n\tFOREIGN KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN
      KEY(\"InvoiceId\") REFERENCES \"Invoice\" (\"InvoiceId\")\n)\n\n/*\n3 rows from
      InvoiceLine table:\nInvoiceLineId\tInvoiceId\tTrackId\tUnitPrice\tQuantity\n\n*/\n\n\nCREATE
      TABLE \"MediaType\" (\n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"MediaTypeId\")\n)\n\n/*\n3 rows from MediaType table:\nMediaTypeId\tName\n1\tMPEG
      audio file\n2\tProtected AAC audio file\n3\tProtected MPEG-4 video file\n*/\n\n\nCREATE
      TABLE \"Playlist\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"PlaylistId\")\n)\n\n/*\n3 rows from Playlist table:\nPlaylistId\tName\n\n*/\n\n\nCREATE
      TABLE \"PlaylistTrack\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"TrackId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"PlaylistId\", \"TrackId\"), \n\tFOREIGN
      KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN KEY(\"PlaylistId\")
      REFERENCES \"Playlist\" (\"PlaylistId\")\n)\n\n/*\n3 rows from PlaylistTrack
      table:\nPlaylistId\tTrackId\n\n*/\n\n\nCREATE TABLE \"Track\" (\n\t\"TrackId\"
      INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(200) NOT NULL, \n\t\"AlbumId\" INTEGER,
      \n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"GenreId\" INTEGER, \n\t\"Composer\"
      NVARCHAR(220), \n\t\"Milliseconds\" INTEGER NOT NULL, \n\t\"Bytes\" INTEGER,
      \n\t\"UnitPrice\" NUMERIC(10, 2) NOT NULL, \n\tPRIMARY KEY (\"TrackId\"), \n\tFOREIGN
      KEY(\"MediaTypeId\") REFERENCES \"MediaType\" (\"MediaTypeId\"), \n\tFOREIGN
      KEY(\"GenreId\") REFERENCES \"Genre\" (\"GenreId\"), \n\tFOREIGN KEY(\"AlbumId\")
      REFERENCES \"Album\" (\"AlbumId\")\n)\n\n/*\n3 rows from Track table:\nTrackId\tName\tAlbumId\tMediaTypeId\tGenreId\tComposer\tMilliseconds\tBytes\tUnitPrice\n1\tFor
      Those About To Rock (We Salute You)\t1\t1\t1\tAngus Young, Malcolm Young, Brian
      Johnson\t343719\t11170334\t0.99\n2\tBalls to the Wall\t2\t2\t1\tNone\t342562\t5510424\t0.99\n3\tFast
      As a Shark\t3\t2\t1\tF. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman\t230619\t3990994\t0.99\n*/\n\nQuestion:
      albums by Alanis Morissette\nSQLQuery:SELECT \"Title\" FROM \"Album\" INNER
      JOIN \"Artist\" ON \"Album\".\"ArtistId\" = \"Artist\".\"ArtistId\" WHERE \"Name\"
      = ''Alanis Morissette'' LIMIT 5;\nSQLResult: [(''Jagged Little Pill'',)]\nAnswer:"],
      "model": "text-davinci-003", "temperature": 0.0, "top_p": 1, "frequency_penalty":
      0, "presence_penalty": 0, "n": 1, "logit_bias": {}, "max_tokens": 256, "stop":
      ["\nSQLResult:"]}'
    headers: {}
    method: POST
    uri: https://api.openai.com/v1/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0yQQU/cMBCF7/kVI5/ZbDZsWZRb1VMRCChIPVTVyrEnyWwdj2VPAgjx35GzLPTi
        g998772Z1wJAPenoyfeqAfU4UIKRLTqYMSZiD5TAYohotKAt4Yb6qAWhxY4jwpX2k44vsD2Duqq3
        IAx6ZrJgKcUpSHbgDhLGmQyWcI06ehgzOoiE1KzXwWnpOI4lB/SaSsPj2rJJ61MssU/qLDclm0ua
        MbjV5b3Mcm8O8ZYk/TxcULe7/XE1PDzg7vev4zS3BzSSCcFn2Rseg8PsdpRNxLySamCzqzbbuq7r
        b4uw7H/CVlbP5A2tqur8gxuYDCbVwJ8CAOB1eeE4njF4HBC0a6cxQfsC3532lOCGI6WEIgh6OVzf
        o4VrEnEId+RcudgvTuQtPqsGqs8fx32I3OZUPzn3+d+RpzTsI+rEPocn4aAW9a0A+Ls0npLuUTUf
        TVWIPAbZC/9Dnw3rut4eDdXXjb7kzUkUFu3+x84vixzzVrwDAAD//wMAFyf8nkcCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 82ea3c2adcb85ee5-PDX
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 01 Dec 2023 09:17:05 GMT
      Transfer-Encoding:
      - chunked
      openai-model:
      - text-davinci-003
      openai-processing-ms:
      - '478'
      x-ratelimit-limit-tokens_usage_based:
      - '250000'
      x-ratelimit-remaining-tokens_usage_based:
      - '248085'
      x-ratelimit-reset-tokens_usage_based:
      - 459ms
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\nThis was your previous work (but I haven''t seen
      any of it! I only see what you return as final answer):\nThought: I need to
      search for the artist who recently released an album called ''The Storm Before
      the Calm'' and check if they are in the FooBar database.\n\nAction:\n```\n{\n  \"action\":
      \"Search\",\n  \"action_input\": \"artist who recently released an album called
      ''The Storm Before the Calm''\"\n}\n```\nObservation: [''The Storm Before the
      Calm (stylized in all lowercase) is the tenth (and eighth international) studio
      album by Canadian-American singer-songwriter Alanis ...'', ''Alanis Morissette
      - the storm before the calm - Amazon.com Music.'', \"The Storm Before The Calm
      is Alanis''s first meditation album and features 11 song meditations written
      and recorded during the 2020/2021 pandemic.\", ''When the pandemic took hold
      in 2020, Alanis Morissette was on the verge of releasing a new album (Such Pretty
      Forks in the Road) as well as ...'', ''Discover The Storm Before the Calm by
      Alanis Morissette released in 2022. Find album reviews, track lists, credits,
      awards and more at ...'', ''View credits, reviews, tracks and shop for the 2022
      CD release of \"The Storm Before The Calm\" on Discogs ... Alanis Morissette
      - So-Called Chaos.'', ''Alanis Morissette gets super-chill. Welcome to \u201cStill
      Got It.\u201d New music from vintage musicians. Fresh every Wednesday.'', ''Seven-time
      GRAMMY\u00ae Award-winning singer/songwriter Alanis Morissette releases her
      first meditation album, the storm before the calm ...'', ''Alanis recently dropped
      an album titled The Storm Before The Calm. It is neither unplugged nor brash
      nor are the lyrics confessional ...'']\nThought:The artist who recently released
      an album called ''The Storm Before the Calm'' is Alanis Morissette. Now I need
      to check if Alanis Morissette is in the FooBar database and if so, what albums
      of hers are in the database.\n\nAction:\n```\n{\n  \"action\": \"FooBar DB\",\n  \"action_input\":
      \"Alanis Morissette\"\n}\n```\n\n\nObservation: Alanis Morissette\nThought:Alanis
      Morissette is in the FooBar database. Now I need to find out what albums of
      hers are in the database.\n\nAction:\n```\n{\n  \"action\": \"FooBar DB\",\n  \"action_input\":
      \"albums by Alanis Morissette\"\n}\n```\nObservation: The albums by Alanis Morissette
      are Jagged Little Pill.\nThought:"}], "model": "gpt-3.5-turbo", "stream": false,
      "n": 1, "temperature": 0.0, "stop": ["Observation:"]}'
    headers: {}
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xSwW7TQBC9+ytGe8klseIUAuTWIhUBLQIVqQKKook9iRdmd6ydcUta5d+RHTcB
        ATcue3gz7+3bfe8hA3C+cgtwZY1WhoYnzz/YbXt//Un5+lX9+kIuy/nt5+lbmr/zAd24Y8jqG5X2
        yMpLCQ2TeYn7cZkIjTrV4tm0eDKbzWbzfhCkIu5om8YmJ/nTibVpJZPpvDgZmLX4ktQt4EsGAPDQ
        n53HWNEPt4Dp+BEJpIobcovDEoBLwh3iUNWrYTQ3Pg5LiUaxt33KGL3CpSSvSmYEXsFqAkzm1eCu
        FkhUUjTeQiImVKoAIyCv2gAlMlMFo481wZVJCnBGa0nUS7xEDqMcrupe1McePBc5wwQVGq5QCTBW
        PS6Rt4OorKGmdGAcVr3C6A1uNlTBhTdjgveeeZTfxJt47iMynEa9o7SAzs66ZYaIgTq9//mizscf
        35b3d+4l/mby3z+QuyGY3SHRtY9e62UiVIldSmrS7Nd2GcDXviHtb6G7JklobGnynWJXmxezYq/n
        jqX8ZTrUx5kY8hEvpkWRDVacbtUoLNc+big1yfeNiS1ztst+AgAA//8DADgB+60wAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 82ea3c2e7df95ee5-PDX
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 01 Dec 2023 09:17:17 GMT
      Transfer-Encoding:
      - chunked
      openai-model:
      - gpt-3.5-turbo-0613
      openai-processing-ms:
      - '11587'
      x-ratelimit-limit-tokens_usage_based:
      - '60000'
      x-ratelimit-remaining-tokens_usage_based:
      - '59034'
      x-ratelimit-reset-tokens_usage_based:
      - 966ms
    status:
      code: 200
      message: OK
version: 1
