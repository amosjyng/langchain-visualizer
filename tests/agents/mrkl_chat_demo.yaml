interactions:
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\n"}], "model": "gpt-3.5-turbo", "max_tokens":
      null, "stream": false, "n": 1, "temperature": 0.0, "stop": ["Observation:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1770'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.4
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SRT28aQQzF7/0Uli+5LBGIP4G5VCW0UpReqkSK1G4Fw6yXnTI73o69Iiniu0cs
        hPZS9dDr87yf3/Ps0Rdo0FVWXd2E3s1iPRWZ8/2k3s6e61l/cFt+/vh1K+7X/QIz5PUPcnp2XDuu
        m0DqOWKGLpFVKtAMJtPh6GY8nI0yrLmggAY3jfaG1+OetmnNvf6wP8AMW7EbQrPHJnHd6FJ5S1HQ
        DCfjDH+zL/pgMM1QWW24SKPp8JChq9g7EjTf9liTvGETB0KDVsSL2qjHkByV4rHAl5bkSDfwVFkF
        L6AVQdmGANHWBFx2gk3qRWFXMSRyFDW8QKJAVqgAG8GGdVuDsyFQAVePFcGDcqphTiUn6hC3NtRX
        YGMB9qS8gI/d5BPz3CYorNq1FXoPdyUIZ7A7JurIcs7hk3Tuvxjz+Fhxu6nUwB1IxW0ooJXT+gey
        yVWgzAGUofSxODWLsqN0lLriPolCY5O+Nf95PlCXXCuKF+J5+2L+L6iQ41h01Os8fnDdvfO4Wq3y
        uM8jQI62E3M0kOMpaY7Zn6Olj02rpwdP//sLOebxcA6AhwxLH71Uy0RWOKJBUW4wQx8LekbTP3w/
        vHsFAAD//wMAZ13f3CIDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7c3ab11c6c973e70-ADL
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 07 May 2023 16:03:22 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-ns36y3iizxjt9cbrrl4tneqp
      openai-processing-ms:
      - '8039'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89599'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 267ms
      x-request-id:
      - 327a13d89d08673d482decec0e86daff
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - python-requests/2.28.2
    method: GET
    uri: https://serpapi.com/search?engine=google&gl=us&google_domain=google.com&hl=en&output=json&q=Who+recently+released+an+album+called+%27The+Storm+Before+the+Calm%27&source=python
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - MISS
      CF-Ray:
      - 7c3ab155deb72748-ADL
      Cache-Control:
      - max-age=3600, public
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Sun, 07 May 2023 16:03:25 GMT
      ETag:
      - W/"56fd39817b427e0e33dbc3c07b922361"
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      referrer-policy:
      - strict-origin-when-cross-origin
      serpapi-search-id:
      - 6457cbcb8e02e4c925de2a36
      x-content-type-options:
      - nosniff
      x-download-options:
      - noopen
      x-frame-options:
      - SAMEORIGIN
      x-permitted-cross-domain-policies:
      - none
      x-request-id:
      - 26833906-a007-454a-8430-1fbf9a59baf6
      x-robots-tag:
      - noindex, nofollow
      x-runtime:
      - '1.610348'
      x-xss-protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\nThis was your previous work (but I haven''t seen
      any of it! I only see what you return as final answer):\nQuestion: What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\nThought: I should use the Search tool to find the
      answer to the first part of the question and then use the FooBar DB tool to
      find the answer to the second part.\nAction:\n```\n{\n  \"action\": \"Search\",\n  \"action_input\":
      \"Who recently released an album called ''The Storm Before the Calm''\"\n}\n```\n\nObservation:
      Alanis Morissette\nThought:"}], "model": "gpt-3.5-turbo", "max_tokens": null,
      "stream": false, "n": 1, "temperature": 0.0, "stop": ["Observation:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2430'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.4
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2SPzW7bQAyE730Kgpde1oZcR3a9l8KpUcAo2l6S9tANbFqi460lUtBSSQND717I
        zR+QGzH8ODM8YSzRY3EgK+qmGs1Xu8V09nB1PVkvF/Hzav7j7jj7efX1g82vc3Souz9c2OPFuNC6
        qdiiCjosWibjEv1k9nF6Mc8vstxhrSVX6PG2sdF0nI+sa3c6yqbZBB12iW4Z/QmbVuvGNqZHloQ+
        nywcvng/6/OJQ1Oj6oVcZL3D4qCx4IT+9wlrTk+urVaMHimlmIzEho4qxjL0/673YAcyWMNRzjMD
        tRaTvU8gVLODNRQk0CU+L7+oXlILq0sw1QpMYR+lBO0M4n4gHoBahihnuiSjHSUGkhLuhxyqdl2d
        QM9sbNMTHW0cZFkMj/og2+02yCkIQEA6iwE9BHxOD+hebzdRms7+M79exZTKCZYVSUzwTduYEpsx
        HOjuTcVPAYP0j9FBsHe4jxLTYdMyJRX0mEwbdBil5L/os/6mf/cPAAD//wMAPcbPCDkCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7c3ab164b80d3e70-ADL
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 07 May 2023 16:03:32 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-ns36y3iizxjt9cbrrl4tneqp
      openai-processing-ms:
      - '6316'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89439'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 374ms
      x-request-id:
      - cf680311694f63f00aacb5ae305bdf34
    status:
      code: 200
      message: OK
- request:
    body: '{"prompt": ["You are a SQLite expert. Given an input question, first create
      a syntactically correct SQLite query to run, then look at the results of the
      query and return the answer to the input question.\nUnless the user specifies
      in the question a specific number of examples to obtain, query for at most 5
      results using the LIMIT clause as per SQLite. You can order the results to return
      the most informative data in the database.\nNever query for all columns from
      a table. You must query only the columns that are needed to answer the question.
      Wrap each column name in double quotes (\") to denote them as delimited identifiers.\nPay
      attention to use only the column names you can see in the tables below. Be careful
      to not query for columns that do not exist. Also, pay attention to which column
      is in which table.\n\nUse the following format:\n\nQuestion: \"Question here\"\nSQLQuery:
      \"SQL Query to run\"\nSQLResult: \"Result of the SQLQuery\"\nAnswer: \"Final
      answer here\"\n\nOnly use the following tables:\n\nCREATE TABLE \"Artist\" (\n\t\"ArtistId\"
      INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120), \n\tPRIMARY KEY (\"ArtistId\")\n)\n\n/*\n3
      rows from Artist table:\nArtistId\tName\n1\tAC/DC\n2\tAccept\n3\tAerosmith\n*/\n\n\nCREATE
      TABLE \"Employee\" (\n\t\"EmployeeId\" INTEGER NOT NULL, \n\t\"LastName\" NVARCHAR(20)
      NOT NULL, \n\t\"FirstName\" NVARCHAR(20) NOT NULL, \n\t\"Title\" NVARCHAR(30),
      \n\t\"ReportsTo\" INTEGER, \n\t\"BirthDate\" DATETIME, \n\t\"HireDate\" DATETIME,
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60), \n\tPRIMARY
      KEY (\"EmployeeId\"), \n\tFOREIGN KEY(\"ReportsTo\") REFERENCES \"Employee\"
      (\"EmployeeId\")\n)\n\n/*\n3 rows from Employee table:\nEmployeeId\tLastName\tFirstName\tTitle\tReportsTo\tBirthDate\tHireDate\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\n\n*/\n\n\nCREATE
      TABLE \"Genre\" (\n\t\"GenreId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"GenreId\")\n)\n\n/*\n3 rows from Genre table:\nGenreId\tName\n1\tRock\n2\tJazz\n3\tMetal\n*/\n\n\nCREATE
      TABLE \"MediaType\" (\n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"MediaTypeId\")\n)\n\n/*\n3 rows from MediaType table:\nMediaTypeId\tName\n1\tMPEG
      audio file\n2\tProtected AAC audio file\n3\tProtected MPEG-4 video file\n*/\n\n\nCREATE
      TABLE \"Playlist\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"PlaylistId\")\n)\n\n/*\n3 rows from Playlist table:\nPlaylistId\tName\n\n*/\n\n\nCREATE
      TABLE \"Album\" (\n\t\"AlbumId\" INTEGER NOT NULL, \n\t\"Title\" NVARCHAR(160)
      NOT NULL, \n\t\"ArtistId\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"AlbumId\"),
      \n\tFOREIGN KEY(\"ArtistId\") REFERENCES \"Artist\" (\"ArtistId\")\n)\n\n/*\n3
      rows from Album table:\nAlbumId\tTitle\tArtistId\n1\tFor Those About To Rock
      We Salute You\t1\n2\tBalls to the Wall\t2\n3\tRestless and Wild\t2\n*/\n\n\nCREATE
      TABLE \"Customer\" (\n\t\"CustomerId\" INTEGER NOT NULL, \n\t\"FirstName\" NVARCHAR(40)
      NOT NULL, \n\t\"LastName\" NVARCHAR(20) NOT NULL, \n\t\"Company\" NVARCHAR(80),
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60) NOT NULL,
      \n\t\"SupportRepId\" INTEGER, \n\tPRIMARY KEY (\"CustomerId\"), \n\tFOREIGN
      KEY(\"SupportRepId\") REFERENCES \"Employee\" (\"EmployeeId\")\n)\n\n/*\n3 rows
      from Customer table:\nCustomerId\tFirstName\tLastName\tCompany\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\tSupportRepId\n\n*/\n\n\nCREATE
      TABLE \"Invoice\" (\n\t\"InvoiceId\" INTEGER NOT NULL, \n\t\"CustomerId\" INTEGER
      NOT NULL, \n\t\"InvoiceDate\" DATETIME NOT NULL, \n\t\"BillingAddress\" NVARCHAR(70),
      \n\t\"BillingCity\" NVARCHAR(40), \n\t\"BillingState\" NVARCHAR(40), \n\t\"BillingCountry\"
      NVARCHAR(40), \n\t\"BillingPostalCode\" NVARCHAR(10), \n\t\"Total\" NUMERIC(10,
      2) NOT NULL, \n\tPRIMARY KEY (\"InvoiceId\"), \n\tFOREIGN KEY(\"CustomerId\")
      REFERENCES \"Customer\" (\"CustomerId\")\n)\n\n/*\n3 rows from Invoice table:\nInvoiceId\tCustomerId\tInvoiceDate\tBillingAddress\tBillingCity\tBillingState\tBillingCountry\tBillingPostalCode\tTotal\n\n*/\n\n\nCREATE
      TABLE \"Track\" (\n\t\"TrackId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(200)
      NOT NULL, \n\t\"AlbumId\" INTEGER, \n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"GenreId\"
      INTEGER, \n\t\"Composer\" NVARCHAR(220), \n\t\"Milliseconds\" INTEGER NOT NULL,
      \n\t\"Bytes\" INTEGER, \n\t\"UnitPrice\" NUMERIC(10, 2) NOT NULL, \n\tPRIMARY
      KEY (\"TrackId\"), \n\tFOREIGN KEY(\"MediaTypeId\") REFERENCES \"MediaType\"
      (\"MediaTypeId\"), \n\tFOREIGN KEY(\"GenreId\") REFERENCES \"Genre\" (\"GenreId\"),
      \n\tFOREIGN KEY(\"AlbumId\") REFERENCES \"Album\" (\"AlbumId\")\n)\n\n/*\n3
      rows from Track table:\nTrackId\tName\tAlbumId\tMediaTypeId\tGenreId\tComposer\tMilliseconds\tBytes\tUnitPrice\n1\tFor
      Those About To Rock (We Salute You)\t1\t1\t1\tAngus Young, Malcolm Young, Brian
      Johnson\t343719\t11170334\t0.99\n2\tBalls to the Wall\t2\t2\t1\tNone\t342562\t5510424\t0.99\n3\tFast
      As a Shark\t3\t2\t1\tF. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman\t230619\t3990994\t0.99\n*/\n\n\nCREATE
      TABLE \"InvoiceLine\" (\n\t\"InvoiceLineId\" INTEGER NOT NULL, \n\t\"InvoiceId\"
      INTEGER NOT NULL, \n\t\"TrackId\" INTEGER NOT NULL, \n\t\"UnitPrice\" NUMERIC(10,
      2) NOT NULL, \n\t\"Quantity\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"InvoiceLineId\"),
      \n\tFOREIGN KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN
      KEY(\"InvoiceId\") REFERENCES \"Invoice\" (\"InvoiceId\")\n)\n\n/*\n3 rows from
      InvoiceLine table:\nInvoiceLineId\tInvoiceId\tTrackId\tUnitPrice\tQuantity\n\n*/\n\n\nCREATE
      TABLE \"PlaylistTrack\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"TrackId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"PlaylistId\", \"TrackId\"), \n\tFOREIGN
      KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN KEY(\"PlaylistId\")
      REFERENCES \"Playlist\" (\"PlaylistId\")\n)\n\n/*\n3 rows from PlaylistTrack
      table:\nPlaylistId\tTrackId\n\n*/\n\nQuestion: What albums does Alanis Morissette
      have in the database?\nSQLQuery:"], "model": "text-davinci-003", "temperature":
      0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty":
      0, "n": 1, "logit_bias": {}, "stop": ["\nSQLResult:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6520'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.4
    method: POST
    uri: https://api.openai.com/v1/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1TQzU7CQBiF4b1XMTkbNoNpKaiMcUG0hBpaTCFxYQ3pzwCj05mm80FICPduICq6
        Pe+zOgeoCgJl3eju7VMxHK38lTevxkFTTmz5QukiXA/jYLMDhy0+ZEkQILmnZWnrRktS1oCjbGVO
        soLwb+6C/u2g7/c4altJ/c27Vb5TplRdzwtOfmNVKR3E2+GcIcDm4TR8XLAMC0VaZmDjdBazDCNd
        bOsMLEqSMGXPsyg5jS0pRxnYLLmQ6589qjKwhz/sf3mdhGnIMiR5Lc+wM9K5UY7FtlXOSSLZYdMo
        jhZscA8OZSq5h/A4tF03rS0chNlqzbFSRrnNspW5swYCjmyD4zvH1uVrCXFA09q6oSXZT2kcRM8f
        +ByX735Df8hBlnJ9oT3POx6vvgAAAP//AwDS93iSogEAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7c3ab18e384c3e70-ADL
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 07 May 2023 16:03:37 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - text-davinci-003
      openai-organization:
      - user-ns36y3iizxjt9cbrrl4tneqp
      openai-processing-ms:
      - '5358'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '250000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '249744'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 61ms
      x-request-id:
      - 26682184a372df84310c34e27fa397a5
    status:
      code: 200
      message: OK
- request:
    body: '{"prompt": ["You are a SQLite expert. Given an input question, first create
      a syntactically correct SQLite query to run, then look at the results of the
      query and return the answer to the input question.\nUnless the user specifies
      in the question a specific number of examples to obtain, query for at most 5
      results using the LIMIT clause as per SQLite. You can order the results to return
      the most informative data in the database.\nNever query for all columns from
      a table. You must query only the columns that are needed to answer the question.
      Wrap each column name in double quotes (\") to denote them as delimited identifiers.\nPay
      attention to use only the column names you can see in the tables below. Be careful
      to not query for columns that do not exist. Also, pay attention to which column
      is in which table.\n\nUse the following format:\n\nQuestion: \"Question here\"\nSQLQuery:
      \"SQL Query to run\"\nSQLResult: \"Result of the SQLQuery\"\nAnswer: \"Final
      answer here\"\n\nOnly use the following tables:\n\nCREATE TABLE \"Artist\" (\n\t\"ArtistId\"
      INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120), \n\tPRIMARY KEY (\"ArtistId\")\n)\n\n/*\n3
      rows from Artist table:\nArtistId\tName\n1\tAC/DC\n2\tAccept\n3\tAerosmith\n*/\n\n\nCREATE
      TABLE \"Employee\" (\n\t\"EmployeeId\" INTEGER NOT NULL, \n\t\"LastName\" NVARCHAR(20)
      NOT NULL, \n\t\"FirstName\" NVARCHAR(20) NOT NULL, \n\t\"Title\" NVARCHAR(30),
      \n\t\"ReportsTo\" INTEGER, \n\t\"BirthDate\" DATETIME, \n\t\"HireDate\" DATETIME,
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60), \n\tPRIMARY
      KEY (\"EmployeeId\"), \n\tFOREIGN KEY(\"ReportsTo\") REFERENCES \"Employee\"
      (\"EmployeeId\")\n)\n\n/*\n3 rows from Employee table:\nEmployeeId\tLastName\tFirstName\tTitle\tReportsTo\tBirthDate\tHireDate\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\n\n*/\n\n\nCREATE
      TABLE \"Genre\" (\n\t\"GenreId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"GenreId\")\n)\n\n/*\n3 rows from Genre table:\nGenreId\tName\n1\tRock\n2\tJazz\n3\tMetal\n*/\n\n\nCREATE
      TABLE \"MediaType\" (\n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"MediaTypeId\")\n)\n\n/*\n3 rows from MediaType table:\nMediaTypeId\tName\n1\tMPEG
      audio file\n2\tProtected AAC audio file\n3\tProtected MPEG-4 video file\n*/\n\n\nCREATE
      TABLE \"Playlist\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"PlaylistId\")\n)\n\n/*\n3 rows from Playlist table:\nPlaylistId\tName\n\n*/\n\n\nCREATE
      TABLE \"Album\" (\n\t\"AlbumId\" INTEGER NOT NULL, \n\t\"Title\" NVARCHAR(160)
      NOT NULL, \n\t\"ArtistId\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"AlbumId\"),
      \n\tFOREIGN KEY(\"ArtistId\") REFERENCES \"Artist\" (\"ArtistId\")\n)\n\n/*\n3
      rows from Album table:\nAlbumId\tTitle\tArtistId\n1\tFor Those About To Rock
      We Salute You\t1\n2\tBalls to the Wall\t2\n3\tRestless and Wild\t2\n*/\n\n\nCREATE
      TABLE \"Customer\" (\n\t\"CustomerId\" INTEGER NOT NULL, \n\t\"FirstName\" NVARCHAR(40)
      NOT NULL, \n\t\"LastName\" NVARCHAR(20) NOT NULL, \n\t\"Company\" NVARCHAR(80),
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60) NOT NULL,
      \n\t\"SupportRepId\" INTEGER, \n\tPRIMARY KEY (\"CustomerId\"), \n\tFOREIGN
      KEY(\"SupportRepId\") REFERENCES \"Employee\" (\"EmployeeId\")\n)\n\n/*\n3 rows
      from Customer table:\nCustomerId\tFirstName\tLastName\tCompany\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\tSupportRepId\n\n*/\n\n\nCREATE
      TABLE \"Invoice\" (\n\t\"InvoiceId\" INTEGER NOT NULL, \n\t\"CustomerId\" INTEGER
      NOT NULL, \n\t\"InvoiceDate\" DATETIME NOT NULL, \n\t\"BillingAddress\" NVARCHAR(70),
      \n\t\"BillingCity\" NVARCHAR(40), \n\t\"BillingState\" NVARCHAR(40), \n\t\"BillingCountry\"
      NVARCHAR(40), \n\t\"BillingPostalCode\" NVARCHAR(10), \n\t\"Total\" NUMERIC(10,
      2) NOT NULL, \n\tPRIMARY KEY (\"InvoiceId\"), \n\tFOREIGN KEY(\"CustomerId\")
      REFERENCES \"Customer\" (\"CustomerId\")\n)\n\n/*\n3 rows from Invoice table:\nInvoiceId\tCustomerId\tInvoiceDate\tBillingAddress\tBillingCity\tBillingState\tBillingCountry\tBillingPostalCode\tTotal\n\n*/\n\n\nCREATE
      TABLE \"Track\" (\n\t\"TrackId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(200)
      NOT NULL, \n\t\"AlbumId\" INTEGER, \n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"GenreId\"
      INTEGER, \n\t\"Composer\" NVARCHAR(220), \n\t\"Milliseconds\" INTEGER NOT NULL,
      \n\t\"Bytes\" INTEGER, \n\t\"UnitPrice\" NUMERIC(10, 2) NOT NULL, \n\tPRIMARY
      KEY (\"TrackId\"), \n\tFOREIGN KEY(\"MediaTypeId\") REFERENCES \"MediaType\"
      (\"MediaTypeId\"), \n\tFOREIGN KEY(\"GenreId\") REFERENCES \"Genre\" (\"GenreId\"),
      \n\tFOREIGN KEY(\"AlbumId\") REFERENCES \"Album\" (\"AlbumId\")\n)\n\n/*\n3
      rows from Track table:\nTrackId\tName\tAlbumId\tMediaTypeId\tGenreId\tComposer\tMilliseconds\tBytes\tUnitPrice\n1\tFor
      Those About To Rock (We Salute You)\t1\t1\t1\tAngus Young, Malcolm Young, Brian
      Johnson\t343719\t11170334\t0.99\n2\tBalls to the Wall\t2\t2\t1\tNone\t342562\t5510424\t0.99\n3\tFast
      As a Shark\t3\t2\t1\tF. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman\t230619\t3990994\t0.99\n*/\n\n\nCREATE
      TABLE \"InvoiceLine\" (\n\t\"InvoiceLineId\" INTEGER NOT NULL, \n\t\"InvoiceId\"
      INTEGER NOT NULL, \n\t\"TrackId\" INTEGER NOT NULL, \n\t\"UnitPrice\" NUMERIC(10,
      2) NOT NULL, \n\t\"Quantity\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"InvoiceLineId\"),
      \n\tFOREIGN KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN
      KEY(\"InvoiceId\") REFERENCES \"Invoice\" (\"InvoiceId\")\n)\n\n/*\n3 rows from
      InvoiceLine table:\nInvoiceLineId\tInvoiceId\tTrackId\tUnitPrice\tQuantity\n\n*/\n\n\nCREATE
      TABLE \"PlaylistTrack\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"TrackId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"PlaylistId\", \"TrackId\"), \n\tFOREIGN
      KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN KEY(\"PlaylistId\")
      REFERENCES \"Playlist\" (\"PlaylistId\")\n)\n\n/*\n3 rows from PlaylistTrack
      table:\nPlaylistId\tTrackId\n\n*/\n\nQuestion: What albums does Alanis Morissette
      have in the database?\nSQLQuery: SELECT \"Title\" FROM \"Album\" INNER JOIN
      \"Artist\" ON \"Album\".\"ArtistId\" = \"Artist\".\"ArtistId\" WHERE \"Name\"
      = ''Alanis Morissette'' LIMIT 5;\nSQLResult: [(''Jagged Little Pill'',)]\nAnswer:"],
      "model": "text-davinci-003", "temperature": 0.0, "max_tokens": 256, "top_p":
      1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "logit_bias": {},
      "stop": ["\nSQLResult:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6719'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.4
    method: POST
    uri: https://api.openai.com/v1/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0zPTUsDMRSF4b2/Ipx1Kp3OtLXZKVLFD+jCnUjJJNeZtJncYXJHC6X/XSyirp+X
        A+eI4GHguj5Olrf1at3s1nf38eVxX85uNiv+HKuCr6pUQoPrHTmBgdBBto67PpIETtBwA1khD1Ms
        rspqOa+KpUbHnuJPPvH2IyQXJtPp95RrOTjKMK/HM8NAXUebQlbPPIScSYRUa7OSlpSN9dipB9s0
        5NVTEImkNiFGFdLZvRVb20yX0AjJ0wFmqhG56QeuM0waY9R4DynkdjuQzZxgkIV7nN40xmwbgjmi
        H7jrZSu8p5RhZrNirvH38xeKhYaw2PgvLYvT6eILAAD//wMAstOV/04BAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7c3ab1b17e393e70-ADL
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 07 May 2023 16:03:40 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - text-davinci-003
      openai-organization:
      - user-ns36y3iizxjt9cbrrl4tneqp
      openai-processing-ms:
      - '1946'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '250000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '249744'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 61ms
      x-request-id:
      - f5d24d525388bc8ad99af350b2f04be2
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\nThis was your previous work (but I haven''t seen
      any of it! I only see what you return as final answer):\nQuestion: What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\nThought: I should use the Search tool to find the
      answer to the first part of the question and then use the FooBar DB tool to
      find the answer to the second part.\nAction:\n```\n{\n  \"action\": \"Search\",\n  \"action_input\":
      \"Who recently released an album called ''The Storm Before the Calm''\"\n}\n```\n\nObservation:
      Alanis Morissette\nThought:Now that I know the artist''s name, I can use the
      FooBar DB tool to find out if they are in the database and what albums of theirs
      are in it.\nAction:\n```\n{\n  \"action\": \"FooBar DB\",\n  \"action_input\":
      \"What albums does Alanis Morissette have in the database?\"\n}\n```\n\n\nObservation:  Alanis
      Morissette has the album Jagged Little Pill in the database.\nThought:"}], "model":
      "gpt-3.5-turbo", "max_tokens": null, "stream": false, "n": 1, "temperature":
      0.0, "stop": ["Observation:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2804'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.4
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7SO3UrDQBSE732K5VxvS9Kf1O5dRQoVCxUVKSrlJDk22252w54TlZa8u1TUPoG3
        M/PNzBFsCQaKCqWoG9ebXOfTRZ09pqv93aG6z56y9nJ82C3X6/fFFDSEfEeF/BD9ItSNI7HBg4Yi
        EgqVYNLscjiajEeDREMdSnJgYNtIb9gf96SNeeglwyQFDS3jlsAcoYmhbmQjYU+ewWTpQMO5+08f
        TTVIEHTnZJZ2Gooq2IIYzPMRauLf1hgcgQFktizo5fQxeCF/+v9QkcIolkXNHHrLahmiZSYRUpaV
        9UoqUvMQrjCqEgVzZFLoS1Uhf3vo8rZWN7jdUqlurYgjtbLOnVgr/Rc/tx6dmnn+oGj+awY6DW/W
        W642kZCDBwMsoQEN1pf0CSbpXruLLwAAAP//AwDrwBGD6QEAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7c3ab1bf6b9a3e70-ADL
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 07 May 2023 16:03:43 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-ns36y3iizxjt9cbrrl4tneqp
      openai-processing-ms:
      - '3705'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89350'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 433ms
      x-request-id:
      - 53954ff0736a0b37469c475afa0f58a6
    status:
      code: 200
      message: OK
version: 1
